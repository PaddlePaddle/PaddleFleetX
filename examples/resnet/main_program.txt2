{ // block 0
    var x : LOD_TENSOR.shape(-1, 3, 224, 224).dtype(float32).stop_gradient(True)
    var y : LOD_TENSOR.shape(-1, 1).dtype(int64).stop_gradient(True)
    persist trainable param conv1_weights : LOD_TENSOR.shape(64, 3, 7, 7).dtype(float32).stop_gradient(False)
    var conv1.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 112, 112).dtype(float32).stop_gradient(False)
    persist trainable param bn_conv1_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn_conv1_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn_conv1_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn_conv1_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn_conv1.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn_conv1.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn_conv1.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn_conv1.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 112, 112).dtype(float32).stop_gradient(False)
    var bn_conv1.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 112, 112).dtype(float32).stop_gradient(False)
    var pool2d_0.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2a_branch2a_weights : LOD_TENSOR.shape(64, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res2a_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch2a_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch2a_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn2a_branch2a_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn2a_branch2a_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2a_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2a_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2a_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2a_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2a_branch2b_weights : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    var res2a_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch2b_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch2b_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn2a_branch2b_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn2a_branch2b_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2a_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2a_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2a_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2a_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2a_branch2c_weights : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res2a_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch2c_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch2c_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn2a_branch2c_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn2a_branch2c_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2a_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2a_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2a_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2a_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2a_branch1_weights : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res2a_branch1.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch1_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn2a_branch1_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn2a_branch1_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn2a_branch1_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2a_branch1.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2a_branch1.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2a_branch1.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2a_branch1.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2a.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2a.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2b_branch2a_weights : LOD_TENSOR.shape(64, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res2b_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2b_branch2a_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn2b_branch2a_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn2b_branch2a_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn2b_branch2a_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2b_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2b_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2b_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2b_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2b_branch2b_weights : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    var res2b_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2b_branch2b_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn2b_branch2b_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn2b_branch2b_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn2b_branch2b_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2b_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2b_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2b_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2b_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2b_branch2c_weights : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res2b_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2b_branch2c_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn2b_branch2c_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn2b_branch2c_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn2b_branch2c_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2b_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2b_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2b_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2b_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2b.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2b.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2c_branch2a_weights : LOD_TENSOR.shape(64, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res2c_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2c_branch2a_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn2c_branch2a_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn2c_branch2a_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn2c_branch2a_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2c_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2c_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2c_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2c_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2c_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2c_branch2b_weights : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    var res2c_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2c_branch2b_scale : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist trainable param bn2c_branch2b_offset : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist param bn2c_branch2b_mean : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    persist param bn2c_branch2b_variance : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2c_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2c_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(True)
    var bn2c_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2c_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2c_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res2c_branch2c_weights : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res2c_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn2c_branch2c_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn2c_branch2c_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn2c_branch2c_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn2c_branch2c_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2c_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2c_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn2c_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn2c_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2c.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2c.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res3a_branch2a_weights : LOD_TENSOR.shape(128, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res3a_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch2a_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch2a_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3a_branch2a_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3a_branch2a_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3a_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3a_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3a_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3a_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 56, 56).dtype(float32).stop_gradient(False)
    var bn3a_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 56, 56).dtype(float32).stop_gradient(False)
    persist trainable param res3a_branch2b_weights : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var res3a_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch2b_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch2b_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3a_branch2b_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3a_branch2b_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3a_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3a_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3a_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3a_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3a_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3a_branch2c_weights : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res3a_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch2c_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch2c_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn3a_branch2c_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn3a_branch2c_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3a_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3a_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3a_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3a_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3a_branch1_weights : LOD_TENSOR.shape(512, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res3a_branch1.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch1_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn3a_branch1_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn3a_branch1_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn3a_branch1_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3a_branch1.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3a_branch1.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3a_branch1.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3a_branch1.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3a.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3a.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3b_branch2a_weights : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res3b_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3b_branch2a_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3b_branch2a_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3b_branch2a_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3b_branch2a_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3b_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3b_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3b_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3b_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3b_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3b_branch2b_weights : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var res3b_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3b_branch2b_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3b_branch2b_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3b_branch2b_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3b_branch2b_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3b_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3b_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3b_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3b_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3b_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3b_branch2c_weights : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res3b_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3b_branch2c_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn3b_branch2c_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn3b_branch2c_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn3b_branch2c_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3b_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3b_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3b_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3b_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3b.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3b.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3c_branch2a_weights : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res3c_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3c_branch2a_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3c_branch2a_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3c_branch2a_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3c_branch2a_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3c_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3c_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3c_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3c_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3c_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3c_branch2b_weights : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var res3c_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3c_branch2b_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3c_branch2b_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3c_branch2b_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3c_branch2b_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3c_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3c_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3c_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3c_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3c_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3c_branch2c_weights : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res3c_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3c_branch2c_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn3c_branch2c_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn3c_branch2c_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn3c_branch2c_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3c_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3c_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3c_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3c_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3c.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3c.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3d_branch2a_weights : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res3d_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3d_branch2a_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3d_branch2a_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3d_branch2a_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3d_branch2a_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3d_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3d_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3d_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3d_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3d_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3d_branch2b_weights : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var res3d_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3d_branch2b_scale : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist trainable param bn3d_branch2b_offset : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist param bn3d_branch2b_mean : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    persist param bn3d_branch2b_variance : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3d_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3d_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(True)
    var bn3d_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3d_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3d_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res3d_branch2c_weights : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res3d_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn3d_branch2c_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn3d_branch2c_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn3d_branch2c_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn3d_branch2c_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3d_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3d_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn3d_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn3d_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3d.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3d.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res4a_branch2a_weights : LOD_TENSOR.shape(256, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res4a_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch2a_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch2a_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4a_branch2a_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4a_branch2a_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4a_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4a_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4a_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4a_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 28, 28).dtype(float32).stop_gradient(False)
    var bn4a_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 28, 28).dtype(float32).stop_gradient(False)
    persist trainable param res4a_branch2b_weights : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res4a_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch2b_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch2b_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4a_branch2b_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4a_branch2b_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4a_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4a_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4a_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4a_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4a_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4a_branch2c_weights : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4a_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch2c_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch2c_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4a_branch2c_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4a_branch2c_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4a_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4a_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4a_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4a_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4a_branch1_weights : LOD_TENSOR.shape(1024, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res4a_branch1.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch1_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4a_branch1_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4a_branch1_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4a_branch1_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4a_branch1.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4a_branch1.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4a_branch1.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4a_branch1.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4a.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4a.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4b_branch2a_weights : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4b_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4b_branch2a_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4b_branch2a_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4b_branch2a_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4b_branch2a_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4b_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4b_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4b_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4b_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4b_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4b_branch2b_weights : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res4b_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4b_branch2b_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4b_branch2b_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4b_branch2b_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4b_branch2b_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4b_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4b_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4b_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4b_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4b_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4b_branch2c_weights : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4b_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4b_branch2c_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4b_branch2c_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4b_branch2c_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4b_branch2c_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4b_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4b_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4b_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4b_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4b.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4b.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4c_branch2a_weights : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4c_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4c_branch2a_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4c_branch2a_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4c_branch2a_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4c_branch2a_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4c_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4c_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4c_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4c_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4c_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4c_branch2b_weights : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res4c_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4c_branch2b_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4c_branch2b_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4c_branch2b_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4c_branch2b_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4c_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4c_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4c_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4c_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4c_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4c_branch2c_weights : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4c_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4c_branch2c_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4c_branch2c_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4c_branch2c_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4c_branch2c_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4c_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4c_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4c_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4c_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4c.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4c.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4d_branch2a_weights : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4d_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4d_branch2a_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4d_branch2a_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4d_branch2a_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4d_branch2a_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4d_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4d_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4d_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4d_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4d_branch2b_weights : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res4d_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4d_branch2b_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4d_branch2b_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4d_branch2b_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4d_branch2b_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4d_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4d_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4d_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4d_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4d_branch2c_weights : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4d_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4d_branch2c_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4d_branch2c_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4d_branch2c_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4d_branch2c_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4d_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4d_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4d_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4d_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4d.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4d.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4e_branch2a_weights : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4e_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4e_branch2a_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4e_branch2a_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4e_branch2a_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4e_branch2a_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4e_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4e_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4e_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4e_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4e_branch2b_weights : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res4e_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4e_branch2b_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4e_branch2b_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4e_branch2b_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4e_branch2b_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4e_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4e_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4e_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4e_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4e_branch2c_weights : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4e_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4e_branch2c_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4e_branch2c_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4e_branch2c_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4e_branch2c_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4e_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4e_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4e_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4e_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4e.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4e.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4f_branch2a_weights : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4f_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4f_branch2a_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4f_branch2a_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4f_branch2a_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4f_branch2a_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4f_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4f_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4f_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4f_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4f_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4f_branch2b_weights : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res4f_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4f_branch2b_scale : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist trainable param bn4f_branch2b_offset : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist param bn4f_branch2b_mean : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    persist param bn4f_branch2b_variance : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4f_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4f_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(True)
    var bn4f_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4f_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4f_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res4f_branch2c_weights : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4f_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn4f_branch2c_scale : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist trainable param bn4f_branch2c_offset : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist param bn4f_branch2c_mean : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    persist param bn4f_branch2c_variance : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4f_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4f_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(True)
    var bn4f_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn4f_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4f.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4f.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res5a_branch2a_weights : LOD_TENSOR.shape(512, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res5a_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param bn5a_branch2a_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn5a_branch2a_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn5a_branch2a_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn5a_branch2a_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5a_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5a_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5a_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5a_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 14, 14).dtype(float32).stop_gradient(False)
    var bn5a_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 512, 14, 14).dtype(float32).stop_gradient(False)
    persist trainable param res5a_branch2b_weights : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var res5a_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    persist trainable param bn5a_branch2b_scale : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist trainable param bn5a_branch2b_offset : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist param bn5a_branch2b_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn5a_branch2b_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5a_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5a_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5a_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5a_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5a_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    persist trainable param res5a_branch2c_weights : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res5a_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5a_branch2c_mean : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    persist param bn5a_branch2c_variance : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5a_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5a_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5a_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5a_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5a_branch1.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5a_branch1_mean : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    persist param bn5a_branch1_variance : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5a_branch1.output.1.tmp_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5a_branch1.output.1.tmp_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5a_branch1.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5a_branch1.output.1.tmp_3 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5a.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5a.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5b_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5b_branch2a_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn5b_branch2a_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5b_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5b_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5b_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5b_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5b_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res5b_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5b_branch2b_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn5b_branch2b_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5b_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5b_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5b_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5b_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5b_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res5b_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5b_branch2c_mean : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    persist param bn5b_branch2c_variance : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5b_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5b_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5b_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5b_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5b.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5b.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5c_branch2a.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5c_branch2a_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn5c_branch2a_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5c_branch2a.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5c_branch2a.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5c_branch2a.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5c_branch2a.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5c_branch2a.output.1.tmp_4 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res5c_branch2b.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5c_branch2b_mean : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    persist param bn5c_branch2b_variance : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5c_branch2b.output.1.tmp_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5c_branch2b.output.1.tmp_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(True)
    var bn5c_branch2b.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5c_branch2b.output.1.tmp_3 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5c_branch2b.output.1.tmp_4 : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res5c_branch2c.conv2d.output.1.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    persist param bn5c_branch2c_mean : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    persist param bn5c_branch2c_variance : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5c_branch2c.output.1.tmp_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5c_branch2c.output.1.tmp_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(True)
    var bn5c_branch2c.output.1.tmp_2 : LOD_TENSOR.shape().dtype(float32).stop_gradient(True)
    var bn5c_branch2c.output.1.tmp_3 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5c.add.output.5.tmp_0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5c.add.output.5.tmp_1 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var pool2d_1.tmp_0 : LOD_TENSOR.shape(-1, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var fc_0.tmp_0 : LOD_TENSOR.shape(-1, 102).dtype(float32).stop_gradient(False)
    var fc_0.tmp_1 : LOD_TENSOR.shape(-1, 102).dtype(float32).stop_gradient(False)
    var softmax_with_cross_entropy_0.tmp_0 : LOD_TENSOR.shape(-1, 102).dtype(float32).stop_gradient(False)
    var softmax_with_cross_entropy_0.tmp_1 : LOD_TENSOR.shape(-1, 1).dtype(float32).stop_gradient(False)
    var mean_0.tmp_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var top_k_v2_0.tmp_0 : LOD_TENSOR.shape(-1, 1).dtype(float32).stop_gradient(False)
    var top_k_v2_0.tmp_1 : LOD_TENSOR.shape(-1, 1).dtype(int64).stop_gradient(True)
    var accuracy_0.tmp_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var accuracy_0.tmp_1 : LOD_TENSOR.shape(1,).dtype(int32).stop_gradient(False)
    var accuracy_0.tmp_2 : LOD_TENSOR.shape(1,).dtype(int32).stop_gradient(False)
    var top_k_v2_1.tmp_0 : LOD_TENSOR.shape(-1, 5).dtype(float32).stop_gradient(False)
    var top_k_v2_1.tmp_1 : LOD_TENSOR.shape(-1, 5).dtype(int64).stop_gradient(True)
    var accuracy_1.tmp_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var accuracy_1.tmp_1 : LOD_TENSOR.shape(1,).dtype(int32).stop_gradient(False)
    var accuracy_1.tmp_2 : LOD_TENSOR.shape(1,).dtype(int32).stop_gradient(False)
    var conv1.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 112, 112).dtype(float32).stop_gradient(False)
    var bn_conv1_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn_conv1.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 112, 112).dtype(float32).stop_gradient(False)
    var pool2d_0.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2a_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch2a_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2a_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2a_branch2b_weights@GRAD : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    var res2a_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch2b_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2a_branch2b_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2a_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2a_branch2c_weights@GRAD : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var bn2a_branch2c_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn2a_branch2c_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var pool2d_0.tmp_0@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2a_branch1_weights@GRAD : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res2a_branch1.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch1_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn2a_branch1_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn2a_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var bn2a_branch1.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2a.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2a.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2b_branch2a_weights@GRAD : LOD_TENSOR.shape(64, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res2b_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2a_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var res2b_branch2b_weights@GRAD : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    var res2b_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2b_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2b_branch2b_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2b_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2a.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2b.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2b.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2c_branch2a_weights@GRAD : LOD_TENSOR.shape(64, 256, 1, 1).dtype(float32).stop_gradient(False)
    var bn2c_branch2a_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2c_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2c_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2c_branch2b_weights@GRAD : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    var res2c_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2c_branch2b_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn2c_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res2b_branch2c_weights@GRAD : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var bn2c_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var bn2c_branch2c_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn2c_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2b.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res2c.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res3a_branch2a_weights@GRAD : LOD_TENSOR.shape(128, 256, 1, 1).dtype(float32).stop_gradient(False)
    var bn3a_branch2a_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3a_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 56, 56).dtype(float32).stop_gradient(False)
    var bn3a_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 56, 56).dtype(float32).stop_gradient(False)
    var res3a_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3a_branch2b_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn2c_branch2b_offset@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn3a_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3a_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res3a_branch2c_weights@GRAD : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res2c.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var bn3a_branch2c_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res3a_branch1_weights@GRAD : LOD_TENSOR.shape(512, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res3a_branch1.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn3a_branch1_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res2a_branch2a_weights@GRAD : LOD_TENSOR.shape(64, 64, 1, 1).dtype(float32).stop_gradient(False)
    var bn3a_branch1_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn3a_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3a.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3a.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3a.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3b_branch2a_weights@GRAD : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn3b_branch2a_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3b_branch2a_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3b_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3b_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res3b_branch2b_weights@GRAD : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var bn3b_branch2b_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var res3b_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn3b_branch2c_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn3b_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3a.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3b.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3c_branch2a_weights@GRAD : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn3c_branch2a_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3b_branch2b_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3c_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res3c_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3c_branch2b_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3c_branch2a_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3c_branch2b_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3c_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res3c_branch2c_weights@GRAD : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res3c_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn3c_branch2c_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res3c.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3c.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3c.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3d_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3d_branch2a_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3d_branch2a_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3d_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res3d_branch2b_weights@GRAD : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var bn2c_branch2c_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res3d_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3d_branch2b_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3d_branch2b_offset@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn3d_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res5b_branch2c_weights@GRAD : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn2b_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res5a.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5a_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5a_branch2a_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn2c_branch2a_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn4e_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn3d_branch2c_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn4e_branch2a_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4c_branch2c_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var bn3c_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn4c_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn_conv1_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn3b_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn3c_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res5b.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn3b_branch2c_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5b_branch2a_weights@GRAD : LOD_TENSOR.shape(512, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var bn3a_branch1.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn3b_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn4b_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res2c.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res4c_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn5c_branch2b_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn5b_branch2c_scale@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res4e.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn3a_branch2a_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var res4f_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4b_branch2c_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var bn4a_branch2b_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res3b_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res4a_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 28, 28).dtype(float32).stop_gradient(False)
    var bn2b_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res4c.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4f_branch2c_weights@GRAD : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res2c_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var pool2d_0.tmp_0@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 64, 56, 56).dtype(float32).stop_gradient(False)
    var res5c_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res3b_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn5c_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res3a_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 56, 56).dtype(float32).stop_gradient(False)
    var bn5b_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res5b.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn4f_branch2a_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn2a_branch2a_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn4a_branch2a_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4b_branch2c_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var softmax_with_cross_entropy_0.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1).dtype(float32).stop_gradient(False)
    var bn5a_branch2c_scale@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5a_branch1_offset@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res5c.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn5b_branch2a_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn4a_branch2c_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res5c_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5b.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res4e_branch2b_weights@GRAD : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var res5c_branch2c_weights@GRAD : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn5c_branch2a_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res2b.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var bn2b_branch2a_scale@GRAD : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    var bn4f_branch2c_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var bn4f_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4e.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4f_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res3b_branch2c_weights@GRAD : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var res4f.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4a_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4c_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn3d_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res5b.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var fc_0.b_0@GRAD : LOD_TENSOR.shape(102,).dtype(float32).stop_gradient(False)
    var res3c.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res4b_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn5a_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 14, 14).dtype(float32).stop_gradient(False)
    var bn_conv1.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 64, 112, 112).dtype(float32).stop_gradient(False)
    var bn3d_branch2c_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn4e_branch2c_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var bn5b_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res3d.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn4b_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2a_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4e_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn5c_branch2c_scale@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5a_branch2b_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn4e_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn5b_branch2c_offset@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res3b.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn4f_branch2c_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res4e_branch2c_weights@GRAD : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var pool2d_1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var res2a_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var bn3c_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn5a_branch2c_offset@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res4a_branch1_weights@GRAD : LOD_TENSOR.shape(1024, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn4b_branch2a_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn2b_branch2c_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4d.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn5a_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn4f_branch2b_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res2a.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res3d_branch2c_weights@GRAD : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    var bn4a_branch2a_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn5c_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn4d_branch2c_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res5c_branch2b_weights@GRAD : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var res3c_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res4f_branch2a_weights@GRAD : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4e_branch2a_weights@GRAD : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var bn4c_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4a_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 28, 28).dtype(float32).stop_gradient(False)
    var bn4a_branch2b_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4b_branch2a_weights@GRAD : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res3d_branch2a_weights@GRAD : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn5b_branch2b_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn2b_branch2c_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn5a_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn3c_branch2c_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5a_branch2a_weights@GRAD : LOD_TENSOR.shape(512, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var bn5c_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res4b.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var mean_0.tmp_0@GRAD : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(False)
    var res4d.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var fc_0.tmp_1@GRAD : LOD_TENSOR.shape(-1, 102).dtype(float32).stop_gradient(False)
    var res4e.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn5c_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5a_branch2a_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res2b_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var fc_0.w_0@GRAD : LOD_TENSOR.shape(2048, 102).dtype(float32).stop_gradient(False)
    var bn4b_branch2a_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4a_branch2c_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res3b.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res4a_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res2c.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res4d.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4a_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res3b.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res4f_branch2b_weights@GRAD : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var bn4a_branch1.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4a_branch1_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res3a_branch2b_weights@GRAD : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var bn4c_branch2c_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res3d_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var fc_0.tmp_0@GRAD : LOD_TENSOR.shape(-1, 102).dtype(float32).stop_gradient(False)
    var res5c.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn5c_branch2c_offset@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5c_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5c_branch2b_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5c_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5c_branch2a_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn4d_branch2b_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res5c_branch2a_weights@GRAD : LOD_TENSOR.shape(512, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var bn5b_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var conv1_weights@GRAD : LOD_TENSOR.shape(64, 3, 7, 7).dtype(float32).stop_gradient(False)
    var res5b_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn5b_branch2b_offset@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5b_branch2b_weights@GRAD : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var bn3d_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var bn5b_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res4d_branch2c_weights@GRAD : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var bn5b_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn5b_branch2a_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5b_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res4a_branch2c_weights@GRAD : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var bn4c_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res5a.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5a.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn5a_branch1.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res2c_branch2c_weights@GRAD : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    var res3a_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res4a.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn5a_branch1_scale@GRAD : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res5a_branch1.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res5a_branch1_weights@GRAD : LOD_TENSOR.shape(2048, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4f.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4f.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4c_branch2b_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4b.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res5a_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var bn4b_branch2b_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res5a_branch2c_weights@GRAD : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res4b_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn5a_branch2b_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5a_branch2b_weights@GRAD : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var res5a_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 14, 14).dtype(float32).stop_gradient(False)
    var bn3d_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 128, 28, 28).dtype(float32).stop_gradient(False)
    var res4f.add.output.5.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4f_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2c_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var bn4f_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4c_branch2b_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4f_branch2b_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4f_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn5a_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 512, 14, 14).dtype(float32).stop_gradient(False)
    var bn4f_branch2a_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4f_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4f_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4d.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4a.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4e.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4e_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res5a.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 2048, 7, 7).dtype(float32).stop_gradient(False)
    var res4b.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2b_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4e_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4a_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2a_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn5a_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var res4e_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res3c_branch2b_weights@GRAD : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    var bn4b_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4c.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2c_scale@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res4d_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2b.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn3a_branch2b_scale@GRAD : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    var bn4d_branch2b_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4d_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4b_branch2b_weights@GRAD : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var bn4b_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4d_branch2b_weights@GRAD : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var bn4d_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res5b_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 512, 7, 7).dtype(float32).stop_gradient(False)
    var bn4d_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4d_branch2a_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4d_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4d_branch2a_weights@GRAD : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res2c_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 56, 56).dtype(float32).stop_gradient(False)
    var res4c.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4c_branch2c.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4c_branch2c_weights@GRAD : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var res4c_branch2b_weights@GRAD : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var bn4c_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var bn4c_branch2a_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4c_branch2a_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var res4c_branch2a.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4c_branch2a_weights@GRAD : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var res4b.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4a.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4e_branch2b_scale@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4b_branch2c.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4c.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res4b_branch2c_weights@GRAD : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    var bn3a_branch2c_scale@GRAD : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn4b_branch2b_offset@GRAD : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    var bn4e_branch2a.output.1.tmp_3@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4b_branch2b.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4a.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var bn4a_branch1_offset@GRAD : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    var res4a_branch1.conv2d.output.1.tmp_0@GRAD : LOD_TENSOR.shape(-1, 1024, 14, 14).dtype(float32).stop_gradient(False)
    var res3d.add.output.5.tmp_1@GRAD@RENAME@block0@0 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var bn4a_branch2b.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 14, 14).dtype(float32).stop_gradient(False)
    var res4a_branch2b_weights@GRAD : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    var bn4a_branch2a.output.1.tmp_4@GRAD : LOD_TENSOR.shape(-1, 256, 28, 28).dtype(float32).stop_gradient(False)
    var res4a_branch2a_weights@GRAD : LOD_TENSOR.shape(256, 512, 1, 1).dtype(float32).stop_gradient(False)
    var res3d.add.output.5.tmp_1@GRAD@RENAME@block0@1 : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    var res3d.add.output.5.tmp_1@GRAD : LOD_TENSOR.shape(-1, 512, 28, 28).dtype(float32).stop_gradient(False)
    persist var bn2a_branch1_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch1_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch2a_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch2a_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch2b_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch2b_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch2c_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2a_branch2c_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2b_branch2a_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2b_branch2a_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2b_branch2b_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2b_branch2b_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2b_branch2c_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2b_branch2c_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2c_branch2a_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2c_branch2a_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2c_branch2b_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2c_branch2b_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn2c_branch2c_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn2c_branch2c_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch1_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch1_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch2a_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch2a_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch2b_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch2b_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch2c_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3a_branch2c_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3b_branch2a_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3b_branch2a_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3b_branch2b_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3b_branch2b_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3b_branch2c_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3b_branch2c_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3c_branch2a_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3c_branch2a_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3c_branch2b_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3c_branch2b_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3c_branch2c_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3c_branch2c_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3d_branch2a_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3d_branch2a_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3d_branch2b_offset_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3d_branch2b_scale_velocity_0 : LOD_TENSOR.shape(128,).dtype(float32).stop_gradient(False)
    persist var bn3d_branch2c_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn3d_branch2c_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch1_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch1_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch2a_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch2a_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch2b_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch2b_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch2c_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4a_branch2c_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4b_branch2a_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4b_branch2a_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4b_branch2b_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4b_branch2b_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4b_branch2c_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4b_branch2c_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4c_branch2a_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4c_branch2a_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4c_branch2b_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4c_branch2b_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4c_branch2c_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4c_branch2c_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4d_branch2a_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4d_branch2a_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4d_branch2b_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4d_branch2b_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4d_branch2c_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4d_branch2c_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4e_branch2a_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4e_branch2a_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4e_branch2b_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4e_branch2b_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4e_branch2c_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4e_branch2c_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4f_branch2a_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4f_branch2a_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4f_branch2b_offset_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4f_branch2b_scale_velocity_0 : LOD_TENSOR.shape(256,).dtype(float32).stop_gradient(False)
    persist var bn4f_branch2c_offset_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn4f_branch2c_scale_velocity_0 : LOD_TENSOR.shape(1024,).dtype(float32).stop_gradient(False)
    persist var bn5a_branch2a_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn5a_branch2a_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn5a_branch2b_offset_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn5a_branch2b_scale_velocity_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    persist var bn_conv1_offset_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var bn_conv1_scale_velocity_0 : LOD_TENSOR.shape(64,).dtype(float32).stop_gradient(False)
    persist var conv1_weights_velocity_0 : LOD_TENSOR.shape(64, 3, 7, 7).dtype(float32).stop_gradient(False)
    persist var res2a_branch1_weights_velocity_0 : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    persist var res2a_branch2a_weights_velocity_0 : LOD_TENSOR.shape(64, 64, 1, 1).dtype(float32).stop_gradient(False)
    persist var res2a_branch2b_weights_velocity_0 : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    persist var res2a_branch2c_weights_velocity_0 : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    persist var res2b_branch2a_weights_velocity_0 : LOD_TENSOR.shape(64, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res2b_branch2b_weights_velocity_0 : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    persist var res2b_branch2c_weights_velocity_0 : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    persist var res2c_branch2a_weights_velocity_0 : LOD_TENSOR.shape(64, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res2c_branch2b_weights_velocity_0 : LOD_TENSOR.shape(64, 64, 3, 3).dtype(float32).stop_gradient(False)
    persist var res2c_branch2c_weights_velocity_0 : LOD_TENSOR.shape(256, 64, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3a_branch1_weights_velocity_0 : LOD_TENSOR.shape(512, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3a_branch2a_weights_velocity_0 : LOD_TENSOR.shape(128, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3a_branch2b_weights_velocity_0 : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    persist var res3a_branch2c_weights_velocity_0 : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3b_branch2a_weights_velocity_0 : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3b_branch2b_weights_velocity_0 : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    persist var res3b_branch2c_weights_velocity_0 : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3c_branch2a_weights_velocity_0 : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3c_branch2b_weights_velocity_0 : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    persist var res3c_branch2c_weights_velocity_0 : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3d_branch2a_weights_velocity_0 : LOD_TENSOR.shape(128, 512, 1, 1).dtype(float32).stop_gradient(False)
    persist var res3d_branch2b_weights_velocity_0 : LOD_TENSOR.shape(128, 128, 3, 3).dtype(float32).stop_gradient(False)
    persist var res3d_branch2c_weights_velocity_0 : LOD_TENSOR.shape(512, 128, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4a_branch1_weights_velocity_0 : LOD_TENSOR.shape(1024, 512, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4a_branch2a_weights_velocity_0 : LOD_TENSOR.shape(256, 512, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4a_branch2b_weights_velocity_0 : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    persist var res4a_branch2c_weights_velocity_0 : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4b_branch2a_weights_velocity_0 : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4b_branch2b_weights_velocity_0 : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    persist var res4b_branch2c_weights_velocity_0 : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4c_branch2a_weights_velocity_0 : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4c_branch2b_weights_velocity_0 : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    persist var res4c_branch2c_weights_velocity_0 : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4d_branch2a_weights_velocity_0 : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4d_branch2b_weights_velocity_0 : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    persist var res4d_branch2c_weights_velocity_0 : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4e_branch2a_weights_velocity_0 : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4e_branch2b_weights_velocity_0 : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    persist var res4e_branch2c_weights_velocity_0 : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4f_branch2a_weights_velocity_0 : LOD_TENSOR.shape(256, 1024, 1, 1).dtype(float32).stop_gradient(False)
    persist var res4f_branch2b_weights_velocity_0 : LOD_TENSOR.shape(256, 256, 3, 3).dtype(float32).stop_gradient(False)
    persist var res4f_branch2c_weights_velocity_0 : LOD_TENSOR.shape(1024, 256, 1, 1).dtype(float32).stop_gradient(False)
    persist var res5a_branch2a_weights_velocity_0 : LOD_TENSOR.shape(512, 1024, 1, 1).dtype(float32).stop_gradient(False)
    persist var res5a_branch2b_weights_velocity_0 : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    persist var res5a_branch2c_weights_velocity_0 : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    persist var learning_rate_0 : LOD_TENSOR.shape(1,).dtype(float32).stop_gradient(True)
    var FusedGrad_conv1_weights@GRAD_0 : LOD_TENSOR.shape(0,).dtype(float32).stop_gradient(True)
    var FusedGrad_bn4f_branch2c_offset@GRAD_0 : LOD_TENSOR.shape(0,).dtype(float32).stop_gradient(True)
    var bn5a_branch2c_offset@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5a_branch2c_scale@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res5a_branch1_weights@BroadCast_0 : LOD_TENSOR.shape(2048, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var bn5a_branch1_offset@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5a_branch1_scale@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res5b_branch2a_weights@BroadCast_0 : LOD_TENSOR.shape(512, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var bn5b_branch2a_offset@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn5b_branch2a_scale@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5b_branch2b_weights@BroadCast_0 : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var bn5b_branch2b_offset@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn5b_branch2b_scale@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5b_branch2c_weights@BroadCast_0 : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn5b_branch2c_offset@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5b_branch2c_scale@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res5c_branch2a_weights@BroadCast_0 : LOD_TENSOR.shape(512, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var bn5c_branch2a_offset@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn5c_branch2a_scale@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5c_branch2b_weights@BroadCast_0 : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var bn5c_branch2b_offset@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn5c_branch2b_scale@BroadCast_0 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5c_branch2c_weights@BroadCast_0 : LOD_TENSOR.shape(2048, 512, 1, 1).dtype(float32).stop_gradient(False)
    var bn5c_branch2c_offset@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5c_branch2c_scale@BroadCast_0 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var fc_0.w_0@BroadCast_0 : LOD_TENSOR.shape(2048, 102).dtype(float32).stop_gradient(False)
    var fc_0.b_0@BroadCast_0 : LOD_TENSOR.shape(102,).dtype(float32).stop_gradient(False)
    var res5b_branch2b_weights@BroadCast_1 : LOD_TENSOR.shape(512, 512, 3, 3).dtype(float32).stop_gradient(False)
    var bn5b_branch2a_offset@BroadCast_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var bn5b_branch2a_scale@BroadCast_1 : LOD_TENSOR.shape(512,).dtype(float32).stop_gradient(False)
    var res5b_branch2a_weights@BroadCast_1 : LOD_TENSOR.shape(512, 2048, 1, 1).dtype(float32).stop_gradient(False)
    var bn5a_branch1_offset@BroadCast_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5a_branch1_scale@BroadCast_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var res5a_branch1_weights@BroadCast_1 : LOD_TENSOR.shape(2048, 1024, 1, 1).dtype(float32).stop_gradient(False)
    var bn5a_branch2c_offset@BroadCast_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)
    var bn5a_branch2c_scale@BroadCast_1 : LOD_TENSOR.shape(2048,).dtype(float32).stop_gradient(False)

    {Out=['bn5a_branch2c_scale@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch2c_offset@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5a_branch1_weights@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048, 1024, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch1_scale@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch1_offset@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch2c_scale@BroadCast_1']} = c_sync_calc_stream(inputs={X=['bn5a_branch2c_scale@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Out=['conv1_weights']} = c_broadcast(inputs={X=['conv1_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn_conv1_scale']} = c_broadcast(inputs={X=['bn_conv1_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn_conv1_offset']} = c_broadcast(inputs={X=['bn_conv1_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2a_weights']} = c_broadcast(inputs={X=['res2a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2a_scale']} = c_broadcast(inputs={X=['bn2a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2a_offset']} = c_broadcast(inputs={X=['bn2a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2b_weights']} = c_broadcast(inputs={X=['res2a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2b_scale']} = c_broadcast(inputs={X=['bn2a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2b_offset']} = c_broadcast(inputs={X=['bn2a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2c_weights']} = c_broadcast(inputs={X=['res2a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2c_scale']} = c_broadcast(inputs={X=['bn2a_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2c_offset']} = c_broadcast(inputs={X=['bn2a_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch1_weights']} = c_broadcast(inputs={X=['res2a_branch1_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch1_scale']} = c_broadcast(inputs={X=['bn2a_branch1_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch1_offset']} = c_broadcast(inputs={X=['bn2a_branch1_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2a_weights']} = c_broadcast(inputs={X=['res2b_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2a_scale']} = c_broadcast(inputs={X=['bn2b_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2a_offset']} = c_broadcast(inputs={X=['bn2b_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2b_weights']} = c_broadcast(inputs={X=['res2b_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2b_scale']} = c_broadcast(inputs={X=['bn2b_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2b_offset']} = c_broadcast(inputs={X=['bn2b_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2c_weights']} = c_broadcast(inputs={X=['res2b_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2c_scale']} = c_broadcast(inputs={X=['bn2b_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2c_offset']} = c_broadcast(inputs={X=['bn2b_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2a_weights']} = c_broadcast(inputs={X=['res2c_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2a_scale']} = c_broadcast(inputs={X=['bn2c_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2a_offset']} = c_broadcast(inputs={X=['bn2c_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2b_weights']} = c_broadcast(inputs={X=['res2c_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2b_scale']} = c_broadcast(inputs={X=['bn2c_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2b_offset']} = c_broadcast(inputs={X=['bn2c_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2c_weights']} = c_broadcast(inputs={X=['res2c_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2c_scale']} = c_broadcast(inputs={X=['bn2c_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2c_offset']} = c_broadcast(inputs={X=['bn2c_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2a_weights']} = c_broadcast(inputs={X=['res3a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2a_scale']} = c_broadcast(inputs={X=['bn3a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2a_offset']} = c_broadcast(inputs={X=['bn3a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2b_weights']} = c_broadcast(inputs={X=['res3a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2b_scale']} = c_broadcast(inputs={X=['bn3a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2b_offset']} = c_broadcast(inputs={X=['bn3a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2c_weights']} = c_broadcast(inputs={X=['res3a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2c_scale']} = c_broadcast(inputs={X=['bn3a_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2c_offset']} = c_broadcast(inputs={X=['bn3a_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch1_weights']} = c_broadcast(inputs={X=['res3a_branch1_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch1_scale']} = c_broadcast(inputs={X=['bn3a_branch1_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch1_offset']} = c_broadcast(inputs={X=['bn3a_branch1_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2a_weights']} = c_broadcast(inputs={X=['res3b_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2a_scale']} = c_broadcast(inputs={X=['bn3b_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2a_offset']} = c_broadcast(inputs={X=['bn3b_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2b_weights']} = c_broadcast(inputs={X=['res3b_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2b_scale']} = c_broadcast(inputs={X=['bn3b_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2b_offset']} = c_broadcast(inputs={X=['bn3b_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2c_weights']} = c_broadcast(inputs={X=['res3b_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2c_scale']} = c_broadcast(inputs={X=['bn3b_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2c_offset']} = c_broadcast(inputs={X=['bn3b_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2a_weights']} = c_broadcast(inputs={X=['res3c_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2a_scale']} = c_broadcast(inputs={X=['bn3c_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2a_offset']} = c_broadcast(inputs={X=['bn3c_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2b_weights']} = c_broadcast(inputs={X=['res3c_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2b_scale']} = c_broadcast(inputs={X=['bn3c_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2b_offset']} = c_broadcast(inputs={X=['bn3c_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2c_weights']} = c_broadcast(inputs={X=['res3c_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2c_scale']} = c_broadcast(inputs={X=['bn3c_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2c_offset']} = c_broadcast(inputs={X=['bn3c_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2a_weights']} = c_broadcast(inputs={X=['res3d_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2a_scale']} = c_broadcast(inputs={X=['bn3d_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2a_offset']} = c_broadcast(inputs={X=['bn3d_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2b_weights']} = c_broadcast(inputs={X=['res3d_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2b_scale']} = c_broadcast(inputs={X=['bn3d_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2b_offset']} = c_broadcast(inputs={X=['bn3d_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2c_weights']} = c_broadcast(inputs={X=['res3d_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2c_scale']} = c_broadcast(inputs={X=['bn3d_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2c_offset']} = c_broadcast(inputs={X=['bn3d_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2a_weights']} = c_broadcast(inputs={X=['res4a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2a_scale']} = c_broadcast(inputs={X=['bn4a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2a_offset']} = c_broadcast(inputs={X=['bn4a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2b_weights']} = c_broadcast(inputs={X=['res4a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2b_scale']} = c_broadcast(inputs={X=['bn4a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2b_offset']} = c_broadcast(inputs={X=['bn4a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2c_weights']} = c_broadcast(inputs={X=['res4a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2c_scale']} = c_broadcast(inputs={X=['bn4a_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2c_offset']} = c_broadcast(inputs={X=['bn4a_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch1_weights']} = c_broadcast(inputs={X=['res4a_branch1_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch1_scale']} = c_broadcast(inputs={X=['bn4a_branch1_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch1_offset']} = c_broadcast(inputs={X=['bn4a_branch1_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2a_weights']} = c_broadcast(inputs={X=['res4b_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2a_scale']} = c_broadcast(inputs={X=['bn4b_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2a_offset']} = c_broadcast(inputs={X=['bn4b_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2b_weights']} = c_broadcast(inputs={X=['res4b_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2b_scale']} = c_broadcast(inputs={X=['bn4b_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2b_offset']} = c_broadcast(inputs={X=['bn4b_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2c_weights']} = c_broadcast(inputs={X=['res4b_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2c_scale']} = c_broadcast(inputs={X=['bn4b_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2c_offset']} = c_broadcast(inputs={X=['bn4b_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2a_weights']} = c_broadcast(inputs={X=['res4c_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2a_scale']} = c_broadcast(inputs={X=['bn4c_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2a_offset']} = c_broadcast(inputs={X=['bn4c_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2b_weights']} = c_broadcast(inputs={X=['res4c_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2b_scale']} = c_broadcast(inputs={X=['bn4c_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2b_offset']} = c_broadcast(inputs={X=['bn4c_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2c_weights']} = c_broadcast(inputs={X=['res4c_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2c_scale']} = c_broadcast(inputs={X=['bn4c_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2c_offset']} = c_broadcast(inputs={X=['bn4c_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2a_weights']} = c_broadcast(inputs={X=['res4d_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2a_scale']} = c_broadcast(inputs={X=['bn4d_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2a_offset']} = c_broadcast(inputs={X=['bn4d_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2b_weights']} = c_broadcast(inputs={X=['res4d_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_scale']} = c_broadcast(inputs={X=['bn4d_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_offset']} = c_broadcast(inputs={X=['bn4d_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_offset', 'bn4d_branch2b_scale', 'res4d_branch2b_weights', 'bn4d_branch2a_offset', 'bn4d_branch2a_scale', 'res4d_branch2a_weights', 'bn4c_branch2c_offset', 'bn4c_branch2c_scale', 'res4c_branch2c_weights', 'bn4c_branch2b_offset', 'bn4c_branch2b_scale', 'res4c_branch2b_weights', 'bn4c_branch2a_offset', 'bn4c_branch2a_scale', 'res4c_branch2a_weights', 'bn4b_branch2c_offset', 'bn4b_branch2c_scale', 'res4b_branch2c_weights', 'bn4b_branch2b_offset', 'bn4b_branch2b_scale', 'res4b_branch2b_weights', 'bn4b_branch2a_offset', 'bn4b_branch2a_scale', 'res4b_branch2a_weights', 'bn4a_branch1_offset', 'bn4a_branch1_scale', 'res4a_branch1_weights', 'bn4a_branch2c_offset', 'bn4a_branch2c_scale', 'res4a_branch2c_weights', 'bn4a_branch2b_offset', 'bn4a_branch2b_scale', 'res4a_branch2b_weights', 'bn4a_branch2a_offset', 'bn4a_branch2a_scale', 'res4a_branch2a_weights', 'bn3d_branch2c_offset', 'bn3d_branch2c_scale', 'res3d_branch2c_weights', 'bn3d_branch2b_offset', 'bn3d_branch2b_scale', 'res3d_branch2b_weights', 'bn3d_branch2a_offset', 'bn3d_branch2a_scale', 'res3d_branch2a_weights', 'bn3c_branch2c_offset', 'bn3c_branch2c_scale', 'res3c_branch2c_weights', 'bn3c_branch2b_offset', 'bn3c_branch2b_scale', 'res3c_branch2b_weights', 'bn3c_branch2a_offset', 'bn3c_branch2a_scale', 'res3c_branch2a_weights', 'bn3b_branch2c_offset', 'bn3b_branch2c_scale', 'res3b_branch2c_weights', 'bn3b_branch2b_offset', 'bn3b_branch2b_scale', 'res3b_branch2b_weights', 'bn3b_branch2a_offset', 'bn3b_branch2a_scale', 'res3b_branch2a_weights', 'bn3a_branch1_offset', 'bn3a_branch1_scale', 'res3a_branch1_weights', 'bn3a_branch2c_offset', 'bn3a_branch2c_scale', 'res3a_branch2c_weights', 'bn3a_branch2b_offset', 'bn3a_branch2b_scale', 'res3a_branch2b_weights', 'bn3a_branch2a_offset', 'bn3a_branch2a_scale', 'res3a_branch2a_weights', 'bn2c_branch2c_offset', 'bn2c_branch2c_scale', 'res2c_branch2c_weights', 'bn2c_branch2b_offset', 'bn2c_branch2b_scale', 'res2c_branch2b_weights', 'bn2c_branch2a_offset', 'bn2c_branch2a_scale', 'res2c_branch2a_weights', 'bn2b_branch2c_offset', 'bn2b_branch2c_scale', 'res2b_branch2c_weights', 'bn2b_branch2b_offset', 'bn2b_branch2b_scale', 'res2b_branch2b_weights', 'bn2b_branch2a_offset', 'bn2b_branch2a_scale', 'res2b_branch2a_weights', 'bn2a_branch1_offset', 'bn2a_branch1_scale', 'res2a_branch1_weights', 'bn2a_branch2c_offset', 'bn2a_branch2c_scale', 'res2a_branch2c_weights', 'bn2a_branch2b_offset', 'bn2a_branch2b_scale', 'res2a_branch2b_weights', 'bn2a_branch2a_offset', 'bn2a_branch2a_scale', 'res2a_branch2a_weights', 'bn_conv1_offset', 'bn_conv1_scale', 'conv1_weights']} = c_sync_comm_stream(inputs={X=['bn4d_branch2b_offset', 'bn4d_branch2b_scale', 'res4d_branch2b_weights', 'bn4d_branch2a_offset', 'bn4d_branch2a_scale', 'res4d_branch2a_weights', 'bn4c_branch2c_offset', 'bn4c_branch2c_scale', 'res4c_branch2c_weights', 'bn4c_branch2b_offset', 'bn4c_branch2b_scale', 'res4c_branch2b_weights', 'bn4c_branch2a_offset', 'bn4c_branch2a_scale', 'res4c_branch2a_weights', 'bn4b_branch2c_offset', 'bn4b_branch2c_scale', 'res4b_branch2c_weights', 'bn4b_branch2b_offset', 'bn4b_branch2b_scale', 'res4b_branch2b_weights', 'bn4b_branch2a_offset', 'bn4b_branch2a_scale', 'res4b_branch2a_weights', 'bn4a_branch1_offset', 'bn4a_branch1_scale', 'res4a_branch1_weights', 'bn4a_branch2c_offset', 'bn4a_branch2c_scale', 'res4a_branch2c_weights', 'bn4a_branch2b_offset', 'bn4a_branch2b_scale', 'res4a_branch2b_weights', 'bn4a_branch2a_offset', 'bn4a_branch2a_scale', 'res4a_branch2a_weights', 'bn3d_branch2c_offset', 'bn3d_branch2c_scale', 'res3d_branch2c_weights', 'bn3d_branch2b_offset', 'bn3d_branch2b_scale', 'res3d_branch2b_weights', 'bn3d_branch2a_offset', 'bn3d_branch2a_scale', 'res3d_branch2a_weights', 'bn3c_branch2c_offset', 'bn3c_branch2c_scale', 'res3c_branch2c_weights', 'bn3c_branch2b_offset', 'bn3c_branch2b_scale', 'res3c_branch2b_weights', 'bn3c_branch2a_offset', 'bn3c_branch2a_scale', 'res3c_branch2a_weights', 'bn3b_branch2c_offset', 'bn3b_branch2c_scale', 'res3b_branch2c_weights', 'bn3b_branch2b_offset', 'bn3b_branch2b_scale', 'res3b_branch2b_weights', 'bn3b_branch2a_offset', 'bn3b_branch2a_scale', 'res3b_branch2a_weights', 'bn3a_branch1_offset', 'bn3a_branch1_scale', 'res3a_branch1_weights', 'bn3a_branch2c_offset', 'bn3a_branch2c_scale', 'res3a_branch2c_weights', 'bn3a_branch2b_offset', 'bn3a_branch2b_scale', 'res3a_branch2b_weights', 'bn3a_branch2a_offset', 'bn3a_branch2a_scale', 'res3a_branch2a_weights', 'bn2c_branch2c_offset', 'bn2c_branch2c_scale', 'res2c_branch2c_weights', 'bn2c_branch2b_offset', 'bn2c_branch2b_scale', 'res2c_branch2b_weights', 'bn2c_branch2a_offset', 'bn2c_branch2a_scale', 'res2c_branch2a_weights', 'bn2b_branch2c_offset', 'bn2b_branch2c_scale', 'res2b_branch2c_weights', 'bn2b_branch2b_offset', 'bn2b_branch2b_scale', 'res2b_branch2b_weights', 'bn2b_branch2a_offset', 'bn2b_branch2a_scale', 'res2b_branch2a_weights', 'bn2a_branch1_offset', 'bn2a_branch1_scale', 'res2a_branch1_weights', 'bn2a_branch2c_offset', 'bn2a_branch2c_scale', 'res2a_branch2c_weights', 'bn2a_branch2b_offset', 'bn2a_branch2b_scale', 'res2a_branch2b_weights', 'bn2a_branch2a_offset', 'bn2a_branch2a_scale', 'res2a_branch2a_weights', 'bn_conv1_offset', 'bn_conv1_scale', 'conv1_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {Out=['res4d_branch2c_weights']} = c_broadcast(inputs={X=['res4d_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2c_scale']} = c_broadcast(inputs={X=['bn4d_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2c_offset']} = c_broadcast(inputs={X=['bn4d_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2a_weights']} = c_broadcast(inputs={X=['res4e_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2a_scale']} = c_broadcast(inputs={X=['bn4e_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2a_offset']} = c_broadcast(inputs={X=['bn4e_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2b_weights']} = c_broadcast(inputs={X=['res4e_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2b_scale']} = c_broadcast(inputs={X=['bn4e_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2b_offset']} = c_broadcast(inputs={X=['bn4e_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2c_weights']} = c_broadcast(inputs={X=['res4e_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2c_scale']} = c_broadcast(inputs={X=['bn4e_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2c_offset']} = c_broadcast(inputs={X=['bn4e_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2a_weights']} = c_broadcast(inputs={X=['res4f_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2a_scale']} = c_broadcast(inputs={X=['bn4f_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2a_offset']} = c_broadcast(inputs={X=['bn4f_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2b_weights']} = c_broadcast(inputs={X=['res4f_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2b_scale']} = c_broadcast(inputs={X=['bn4f_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2b_offset']} = c_broadcast(inputs={X=['bn4f_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2c_weights']} = c_broadcast(inputs={X=['res4f_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_scale']} = c_broadcast(inputs={X=['bn4f_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_offset']} = c_broadcast(inputs={X=['bn4f_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2a_weights']} = c_broadcast(inputs={X=['res5a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2a_scale']} = c_broadcast(inputs={X=['bn5a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2a_offset']} = c_broadcast(inputs={X=['bn5a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2b_weights']} = c_broadcast(inputs={X=['res5a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2b_scale']} = c_broadcast(inputs={X=['bn5a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2b_offset']} = c_broadcast(inputs={X=['bn5a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2c_weights']} = c_broadcast(inputs={X=['res5a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2c_scale@BroadCast_1']} = c_broadcast(inputs={X=['bn5a_branch2c_scale@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2c_offset@BroadCast_1']} = c_broadcast(inputs={X=['bn5a_branch2c_offset@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch1_weights@BroadCast_1']} = c_broadcast(inputs={X=['res5a_branch1_weights@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch1_scale@BroadCast_1']} = c_broadcast(inputs={X=['bn5a_branch1_scale@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch1_offset@BroadCast_1']} = c_broadcast(inputs={X=['bn5a_branch1_offset@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Output=['conv1.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['conv1_weights'], Input=['x'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [3, 3], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn_conv1_mean'], ReserveSpace=['bn_conv1.output.1.tmp_2'], SavedMean=['bn_conv1.output.1.tmp_0'], SavedVariance=['bn_conv1.output.1.tmp_1'], VarianceOut=['bn_conv1_variance'], Y=['bn_conv1.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn_conv1_offset'], Mean=['bn_conv1_mean'], MomentumTensor=[], Scale=['bn_conv1_scale'], Variance=['bn_conv1_variance'], X=['conv1.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn_conv1.output.1.tmp_4']} = relu(inputs={X=['bn_conv1.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['pool2d_0.tmp_0']} = pool2d(inputs={X=['bn_conv1.output.1.tmp_4']}, adaptive = False, ceil_mode = False, data_format = NCHW, exclusive = True, global_pooling = False, is_test = False, ksize = [3, 3], mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], pooling_type = max, strides = [2, 2], use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False)
    {Output=['res2a_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2a_branch2a_weights'], Input=['pool2d_0.tmp_0'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2a_branch2a_mean'], ReserveSpace=['bn2a_branch2a.output.1.tmp_2'], SavedMean=['bn2a_branch2a.output.1.tmp_0'], SavedVariance=['bn2a_branch2a.output.1.tmp_1'], VarianceOut=['bn2a_branch2a_variance'], Y=['bn2a_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2a_branch2a_offset'], Mean=['bn2a_branch2a_mean'], MomentumTensor=[], Scale=['bn2a_branch2a_scale'], Variance=['bn2a_branch2a_variance'], X=['res2a_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn2a_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn2a_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2a_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2a_branch2b_weights'], Input=['bn2a_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2a_branch2b_mean'], ReserveSpace=['bn2a_branch2b.output.1.tmp_2'], SavedMean=['bn2a_branch2b.output.1.tmp_0'], SavedVariance=['bn2a_branch2b.output.1.tmp_1'], VarianceOut=['bn2a_branch2b_variance'], Y=['bn2a_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2a_branch2b_offset'], Mean=['bn2a_branch2b_mean'], MomentumTensor=[], Scale=['bn2a_branch2b_scale'], Variance=['bn2a_branch2b_variance'], X=['res2a_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn2a_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn2a_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2a_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2a_branch2c_weights'], Input=['bn2a_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2a_branch2c_mean'], ReserveSpace=['bn2a_branch2c.output.1.tmp_2'], SavedMean=['bn2a_branch2c.output.1.tmp_0'], SavedVariance=['bn2a_branch2c.output.1.tmp_1'], VarianceOut=['bn2a_branch2c_variance'], Y=['bn2a_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2a_branch2c_offset'], Mean=['bn2a_branch2c_mean'], MomentumTensor=[], Scale=['bn2a_branch2c_scale'], Variance=['bn2a_branch2c_variance'], X=['res2a_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2a_branch1.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2a_branch1_weights'], Input=['pool2d_0.tmp_0'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2a_branch1_mean'], ReserveSpace=['bn2a_branch1.output.1.tmp_2'], SavedMean=['bn2a_branch1.output.1.tmp_0'], SavedVariance=['bn2a_branch1.output.1.tmp_1'], VarianceOut=['bn2a_branch1_variance'], Y=['bn2a_branch1.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2a_branch1_offset'], Mean=['bn2a_branch1_mean'], MomentumTensor=[], Scale=['bn2a_branch1_scale'], Variance=['bn2a_branch1_variance'], X=['res2a_branch1.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res2a.add.output.5.tmp_0']} = elementwise_add(inputs={X=['bn2a_branch1.output.1.tmp_3'], Y=['bn2a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res2a.add.output.5.tmp_1']} = relu(inputs={X=['res2a.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2b_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2b_branch2a_weights'], Input=['res2a.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2b_branch2a_mean'], ReserveSpace=['bn2b_branch2a.output.1.tmp_2'], SavedMean=['bn2b_branch2a.output.1.tmp_0'], SavedVariance=['bn2b_branch2a.output.1.tmp_1'], VarianceOut=['bn2b_branch2a_variance'], Y=['bn2b_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2b_branch2a_offset'], Mean=['bn2b_branch2a_mean'], MomentumTensor=[], Scale=['bn2b_branch2a_scale'], Variance=['bn2b_branch2a_variance'], X=['res2b_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn2b_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn2b_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2b_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2b_branch2b_weights'], Input=['bn2b_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2b_branch2b_mean'], ReserveSpace=['bn2b_branch2b.output.1.tmp_2'], SavedMean=['bn2b_branch2b.output.1.tmp_0'], SavedVariance=['bn2b_branch2b.output.1.tmp_1'], VarianceOut=['bn2b_branch2b_variance'], Y=['bn2b_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2b_branch2b_offset'], Mean=['bn2b_branch2b_mean'], MomentumTensor=[], Scale=['bn2b_branch2b_scale'], Variance=['bn2b_branch2b_variance'], X=['res2b_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn2b_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn2b_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2b_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2b_branch2c_weights'], Input=['bn2b_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2b_branch2c_mean'], ReserveSpace=['bn2b_branch2c.output.1.tmp_2'], SavedMean=['bn2b_branch2c.output.1.tmp_0'], SavedVariance=['bn2b_branch2c.output.1.tmp_1'], VarianceOut=['bn2b_branch2c_variance'], Y=['bn2b_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2b_branch2c_offset'], Mean=['bn2b_branch2c_mean'], MomentumTensor=[], Scale=['bn2b_branch2c_scale'], Variance=['bn2b_branch2c_variance'], X=['res2b_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res2b.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res2a.add.output.5.tmp_1'], Y=['bn2b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res2b.add.output.5.tmp_1']} = relu(inputs={X=['res2b.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2c_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2c_branch2a_weights'], Input=['res2b.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2c_branch2a_mean'], ReserveSpace=['bn2c_branch2a.output.1.tmp_2'], SavedMean=['bn2c_branch2a.output.1.tmp_0'], SavedVariance=['bn2c_branch2a.output.1.tmp_1'], VarianceOut=['bn2c_branch2a_variance'], Y=['bn2c_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2c_branch2a_offset'], Mean=['bn2c_branch2a_mean'], MomentumTensor=[], Scale=['bn2c_branch2a_scale'], Variance=['bn2c_branch2a_variance'], X=['res2c_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn2c_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn2c_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2c_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2c_branch2b_weights'], Input=['bn2c_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2c_branch2b_mean'], ReserveSpace=['bn2c_branch2b.output.1.tmp_2'], SavedMean=['bn2c_branch2b.output.1.tmp_0'], SavedVariance=['bn2c_branch2b.output.1.tmp_1'], VarianceOut=['bn2c_branch2b_variance'], Y=['bn2c_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2c_branch2b_offset'], Mean=['bn2c_branch2b_mean'], MomentumTensor=[], Scale=['bn2c_branch2b_scale'], Variance=['bn2c_branch2b_variance'], X=['res2c_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn2c_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn2c_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res2c_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res2c_branch2c_weights'], Input=['bn2c_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn2c_branch2c_mean'], ReserveSpace=['bn2c_branch2c.output.1.tmp_2'], SavedMean=['bn2c_branch2c.output.1.tmp_0'], SavedVariance=['bn2c_branch2c.output.1.tmp_1'], VarianceOut=['bn2c_branch2c_variance'], Y=['bn2c_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn2c_branch2c_offset'], Mean=['bn2c_branch2c_mean'], MomentumTensor=[], Scale=['bn2c_branch2c_scale'], Variance=['bn2c_branch2c_variance'], X=['res2c_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res2c.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res2b.add.output.5.tmp_1'], Y=['bn2c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res2c.add.output.5.tmp_1']} = relu(inputs={X=['res2c.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3a_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3a_branch2a_weights'], Input=['res2c.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3a_branch2a_mean'], ReserveSpace=['bn3a_branch2a.output.1.tmp_2'], SavedMean=['bn3a_branch2a.output.1.tmp_0'], SavedVariance=['bn3a_branch2a.output.1.tmp_1'], VarianceOut=['bn3a_branch2a_variance'], Y=['bn3a_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3a_branch2a_offset'], Mean=['bn3a_branch2a_mean'], MomentumTensor=[], Scale=['bn3a_branch2a_scale'], Variance=['bn3a_branch2a_variance'], X=['res3a_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3a_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn3a_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3a_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3a_branch2b_weights'], Input=['bn3a_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3a_branch2b_mean'], ReserveSpace=['bn3a_branch2b.output.1.tmp_2'], SavedMean=['bn3a_branch2b.output.1.tmp_0'], SavedVariance=['bn3a_branch2b.output.1.tmp_1'], VarianceOut=['bn3a_branch2b_variance'], Y=['bn3a_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3a_branch2b_offset'], Mean=['bn3a_branch2b_mean'], MomentumTensor=[], Scale=['bn3a_branch2b_scale'], Variance=['bn3a_branch2b_variance'], X=['res3a_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3a_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn3a_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3a_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3a_branch2c_weights'], Input=['bn3a_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3a_branch2c_mean'], ReserveSpace=['bn3a_branch2c.output.1.tmp_2'], SavedMean=['bn3a_branch2c.output.1.tmp_0'], SavedVariance=['bn3a_branch2c.output.1.tmp_1'], VarianceOut=['bn3a_branch2c_variance'], Y=['bn3a_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3a_branch2c_offset'], Mean=['bn3a_branch2c_mean'], MomentumTensor=[], Scale=['bn3a_branch2c_scale'], Variance=['bn3a_branch2c_variance'], X=['res3a_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3a_branch1.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3a_branch1_weights'], Input=['res2c.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3a_branch1_mean'], ReserveSpace=['bn3a_branch1.output.1.tmp_2'], SavedMean=['bn3a_branch1.output.1.tmp_0'], SavedVariance=['bn3a_branch1.output.1.tmp_1'], VarianceOut=['bn3a_branch1_variance'], Y=['bn3a_branch1.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3a_branch1_offset'], Mean=['bn3a_branch1_mean'], MomentumTensor=[], Scale=['bn3a_branch1_scale'], Variance=['bn3a_branch1_variance'], X=['res3a_branch1.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res3a.add.output.5.tmp_0']} = elementwise_add(inputs={X=['bn3a_branch1.output.1.tmp_3'], Y=['bn3a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res3a.add.output.5.tmp_1']} = relu(inputs={X=['res3a.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3b_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3b_branch2a_weights'], Input=['res3a.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3b_branch2a_mean'], ReserveSpace=['bn3b_branch2a.output.1.tmp_2'], SavedMean=['bn3b_branch2a.output.1.tmp_0'], SavedVariance=['bn3b_branch2a.output.1.tmp_1'], VarianceOut=['bn3b_branch2a_variance'], Y=['bn3b_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3b_branch2a_offset'], Mean=['bn3b_branch2a_mean'], MomentumTensor=[], Scale=['bn3b_branch2a_scale'], Variance=['bn3b_branch2a_variance'], X=['res3b_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3b_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn3b_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3b_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3b_branch2b_weights'], Input=['bn3b_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3b_branch2b_mean'], ReserveSpace=['bn3b_branch2b.output.1.tmp_2'], SavedMean=['bn3b_branch2b.output.1.tmp_0'], SavedVariance=['bn3b_branch2b.output.1.tmp_1'], VarianceOut=['bn3b_branch2b_variance'], Y=['bn3b_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3b_branch2b_offset'], Mean=['bn3b_branch2b_mean'], MomentumTensor=[], Scale=['bn3b_branch2b_scale'], Variance=['bn3b_branch2b_variance'], X=['res3b_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3b_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn3b_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3b_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3b_branch2c_weights'], Input=['bn3b_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3b_branch2c_mean'], ReserveSpace=['bn3b_branch2c.output.1.tmp_2'], SavedMean=['bn3b_branch2c.output.1.tmp_0'], SavedVariance=['bn3b_branch2c.output.1.tmp_1'], VarianceOut=['bn3b_branch2c_variance'], Y=['bn3b_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3b_branch2c_offset'], Mean=['bn3b_branch2c_mean'], MomentumTensor=[], Scale=['bn3b_branch2c_scale'], Variance=['bn3b_branch2c_variance'], X=['res3b_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res3b.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res3a.add.output.5.tmp_1'], Y=['bn3b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res3b.add.output.5.tmp_1']} = relu(inputs={X=['res3b.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3c_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3c_branch2a_weights'], Input=['res3b.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3c_branch2a_mean'], ReserveSpace=['bn3c_branch2a.output.1.tmp_2'], SavedMean=['bn3c_branch2a.output.1.tmp_0'], SavedVariance=['bn3c_branch2a.output.1.tmp_1'], VarianceOut=['bn3c_branch2a_variance'], Y=['bn3c_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3c_branch2a_offset'], Mean=['bn3c_branch2a_mean'], MomentumTensor=[], Scale=['bn3c_branch2a_scale'], Variance=['bn3c_branch2a_variance'], X=['res3c_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3c_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn3c_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3c_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3c_branch2b_weights'], Input=['bn3c_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3c_branch2b_mean'], ReserveSpace=['bn3c_branch2b.output.1.tmp_2'], SavedMean=['bn3c_branch2b.output.1.tmp_0'], SavedVariance=['bn3c_branch2b.output.1.tmp_1'], VarianceOut=['bn3c_branch2b_variance'], Y=['bn3c_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3c_branch2b_offset'], Mean=['bn3c_branch2b_mean'], MomentumTensor=[], Scale=['bn3c_branch2b_scale'], Variance=['bn3c_branch2b_variance'], X=['res3c_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3c_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn3c_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3c_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3c_branch2c_weights'], Input=['bn3c_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3c_branch2c_mean'], ReserveSpace=['bn3c_branch2c.output.1.tmp_2'], SavedMean=['bn3c_branch2c.output.1.tmp_0'], SavedVariance=['bn3c_branch2c.output.1.tmp_1'], VarianceOut=['bn3c_branch2c_variance'], Y=['bn3c_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3c_branch2c_offset'], Mean=['bn3c_branch2c_mean'], MomentumTensor=[], Scale=['bn3c_branch2c_scale'], Variance=['bn3c_branch2c_variance'], X=['res3c_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res3c.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res3b.add.output.5.tmp_1'], Y=['bn3c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res3c.add.output.5.tmp_1']} = relu(inputs={X=['res3c.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3d_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3d_branch2a_weights'], Input=['res3c.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3d_branch2a_mean'], ReserveSpace=['bn3d_branch2a.output.1.tmp_2'], SavedMean=['bn3d_branch2a.output.1.tmp_0'], SavedVariance=['bn3d_branch2a.output.1.tmp_1'], VarianceOut=['bn3d_branch2a_variance'], Y=['bn3d_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3d_branch2a_offset'], Mean=['bn3d_branch2a_mean'], MomentumTensor=[], Scale=['bn3d_branch2a_scale'], Variance=['bn3d_branch2a_variance'], X=['res3d_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3d_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn3d_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3d_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3d_branch2b_weights'], Input=['bn3d_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3d_branch2b_mean'], ReserveSpace=['bn3d_branch2b.output.1.tmp_2'], SavedMean=['bn3d_branch2b.output.1.tmp_0'], SavedVariance=['bn3d_branch2b.output.1.tmp_1'], VarianceOut=['bn3d_branch2b_variance'], Y=['bn3d_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3d_branch2b_offset'], Mean=['bn3d_branch2b_mean'], MomentumTensor=[], Scale=['bn3d_branch2b_scale'], Variance=['bn3d_branch2b_variance'], X=['res3d_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn3d_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn3d_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res3d_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res3d_branch2c_weights'], Input=['bn3d_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn3d_branch2c_mean'], ReserveSpace=['bn3d_branch2c.output.1.tmp_2'], SavedMean=['bn3d_branch2c.output.1.tmp_0'], SavedVariance=['bn3d_branch2c.output.1.tmp_1'], VarianceOut=['bn3d_branch2c_variance'], Y=['bn3d_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn3d_branch2c_offset'], Mean=['bn3d_branch2c_mean'], MomentumTensor=[], Scale=['bn3d_branch2c_scale'], Variance=['bn3d_branch2c_variance'], X=['res3d_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res3d.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res3c.add.output.5.tmp_1'], Y=['bn3d_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res3d.add.output.5.tmp_1']} = relu(inputs={X=['res3d.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4a_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4a_branch2a_weights'], Input=['res3d.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4a_branch2a_mean'], ReserveSpace=['bn4a_branch2a.output.1.tmp_2'], SavedMean=['bn4a_branch2a.output.1.tmp_0'], SavedVariance=['bn4a_branch2a.output.1.tmp_1'], VarianceOut=['bn4a_branch2a_variance'], Y=['bn4a_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4a_branch2a_offset'], Mean=['bn4a_branch2a_mean'], MomentumTensor=[], Scale=['bn4a_branch2a_scale'], Variance=['bn4a_branch2a_variance'], X=['res4a_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4a_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn4a_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4a_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4a_branch2b_weights'], Input=['bn4a_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4a_branch2b_mean'], ReserveSpace=['bn4a_branch2b.output.1.tmp_2'], SavedMean=['bn4a_branch2b.output.1.tmp_0'], SavedVariance=['bn4a_branch2b.output.1.tmp_1'], VarianceOut=['bn4a_branch2b_variance'], Y=['bn4a_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4a_branch2b_offset'], Mean=['bn4a_branch2b_mean'], MomentumTensor=[], Scale=['bn4a_branch2b_scale'], Variance=['bn4a_branch2b_variance'], X=['res4a_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4a_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn4a_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4a_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4a_branch2c_weights'], Input=['bn4a_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4a_branch2c_mean'], ReserveSpace=['bn4a_branch2c.output.1.tmp_2'], SavedMean=['bn4a_branch2c.output.1.tmp_0'], SavedVariance=['bn4a_branch2c.output.1.tmp_1'], VarianceOut=['bn4a_branch2c_variance'], Y=['bn4a_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4a_branch2c_offset'], Mean=['bn4a_branch2c_mean'], MomentumTensor=[], Scale=['bn4a_branch2c_scale'], Variance=['bn4a_branch2c_variance'], X=['res4a_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4a_branch1.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4a_branch1_weights'], Input=['res3d.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4a_branch1_mean'], ReserveSpace=['bn4a_branch1.output.1.tmp_2'], SavedMean=['bn4a_branch1.output.1.tmp_0'], SavedVariance=['bn4a_branch1.output.1.tmp_1'], VarianceOut=['bn4a_branch1_variance'], Y=['bn4a_branch1.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4a_branch1_offset'], Mean=['bn4a_branch1_mean'], MomentumTensor=[], Scale=['bn4a_branch1_scale'], Variance=['bn4a_branch1_variance'], X=['res4a_branch1.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res4a.add.output.5.tmp_0']} = elementwise_add(inputs={X=['bn4a_branch1.output.1.tmp_3'], Y=['bn4a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res4a.add.output.5.tmp_1']} = relu(inputs={X=['res4a.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4b_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4b_branch2a_weights'], Input=['res4a.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4b_branch2a_mean'], ReserveSpace=['bn4b_branch2a.output.1.tmp_2'], SavedMean=['bn4b_branch2a.output.1.tmp_0'], SavedVariance=['bn4b_branch2a.output.1.tmp_1'], VarianceOut=['bn4b_branch2a_variance'], Y=['bn4b_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4b_branch2a_offset'], Mean=['bn4b_branch2a_mean'], MomentumTensor=[], Scale=['bn4b_branch2a_scale'], Variance=['bn4b_branch2a_variance'], X=['res4b_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4b_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn4b_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4b_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4b_branch2b_weights'], Input=['bn4b_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4b_branch2b_mean'], ReserveSpace=['bn4b_branch2b.output.1.tmp_2'], SavedMean=['bn4b_branch2b.output.1.tmp_0'], SavedVariance=['bn4b_branch2b.output.1.tmp_1'], VarianceOut=['bn4b_branch2b_variance'], Y=['bn4b_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4b_branch2b_offset'], Mean=['bn4b_branch2b_mean'], MomentumTensor=[], Scale=['bn4b_branch2b_scale'], Variance=['bn4b_branch2b_variance'], X=['res4b_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4b_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn4b_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4b_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4b_branch2c_weights'], Input=['bn4b_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4b_branch2c_mean'], ReserveSpace=['bn4b_branch2c.output.1.tmp_2'], SavedMean=['bn4b_branch2c.output.1.tmp_0'], SavedVariance=['bn4b_branch2c.output.1.tmp_1'], VarianceOut=['bn4b_branch2c_variance'], Y=['bn4b_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4b_branch2c_offset'], Mean=['bn4b_branch2c_mean'], MomentumTensor=[], Scale=['bn4b_branch2c_scale'], Variance=['bn4b_branch2c_variance'], X=['res4b_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res4b.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res4a.add.output.5.tmp_1'], Y=['bn4b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res4b.add.output.5.tmp_1']} = relu(inputs={X=['res4b.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4c_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4c_branch2a_weights'], Input=['res4b.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4c_branch2a_mean'], ReserveSpace=['bn4c_branch2a.output.1.tmp_2'], SavedMean=['bn4c_branch2a.output.1.tmp_0'], SavedVariance=['bn4c_branch2a.output.1.tmp_1'], VarianceOut=['bn4c_branch2a_variance'], Y=['bn4c_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4c_branch2a_offset'], Mean=['bn4c_branch2a_mean'], MomentumTensor=[], Scale=['bn4c_branch2a_scale'], Variance=['bn4c_branch2a_variance'], X=['res4c_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4c_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn4c_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4c_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4c_branch2b_weights'], Input=['bn4c_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4c_branch2b_mean'], ReserveSpace=['bn4c_branch2b.output.1.tmp_2'], SavedMean=['bn4c_branch2b.output.1.tmp_0'], SavedVariance=['bn4c_branch2b.output.1.tmp_1'], VarianceOut=['bn4c_branch2b_variance'], Y=['bn4c_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4c_branch2b_offset'], Mean=['bn4c_branch2b_mean'], MomentumTensor=[], Scale=['bn4c_branch2b_scale'], Variance=['bn4c_branch2b_variance'], X=['res4c_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4c_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn4c_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4c_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4c_branch2c_weights'], Input=['bn4c_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4c_branch2c_mean'], ReserveSpace=['bn4c_branch2c.output.1.tmp_2'], SavedMean=['bn4c_branch2c.output.1.tmp_0'], SavedVariance=['bn4c_branch2c.output.1.tmp_1'], VarianceOut=['bn4c_branch2c_variance'], Y=['bn4c_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4c_branch2c_offset'], Mean=['bn4c_branch2c_mean'], MomentumTensor=[], Scale=['bn4c_branch2c_scale'], Variance=['bn4c_branch2c_variance'], X=['res4c_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res4c.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res4b.add.output.5.tmp_1'], Y=['bn4c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res4c.add.output.5.tmp_1']} = relu(inputs={X=['res4c.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4d_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4d_branch2a_weights'], Input=['res4c.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4d_branch2a_mean'], ReserveSpace=['bn4d_branch2a.output.1.tmp_2'], SavedMean=['bn4d_branch2a.output.1.tmp_0'], SavedVariance=['bn4d_branch2a.output.1.tmp_1'], VarianceOut=['bn4d_branch2a_variance'], Y=['bn4d_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4d_branch2a_offset'], Mean=['bn4d_branch2a_mean'], MomentumTensor=[], Scale=['bn4d_branch2a_scale'], Variance=['bn4d_branch2a_variance'], X=['res4d_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4d_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn4d_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4d_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4d_branch2b_weights'], Input=['bn4d_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4d_branch2b_mean'], ReserveSpace=['bn4d_branch2b.output.1.tmp_2'], SavedMean=['bn4d_branch2b.output.1.tmp_0'], SavedVariance=['bn4d_branch2b.output.1.tmp_1'], VarianceOut=['bn4d_branch2b_variance'], Y=['bn4d_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4d_branch2b_offset'], Mean=['bn4d_branch2b_mean'], MomentumTensor=[], Scale=['bn4d_branch2b_scale'], Variance=['bn4d_branch2b_variance'], X=['res4d_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4d_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn4d_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res5b_branch2a_weights@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512, 2048, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2a_scale@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2a_offset@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@BroadCast_1']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512, 512, 3, 3], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['fc_0.b_0@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [102], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['fc_0.w_0@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048, 102], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5c_branch2c_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5c_branch2c_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5c_branch2c_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048, 512, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5c_branch2b_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5c_branch2b_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5c_branch2b_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512, 512, 3, 3], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5c_branch2a_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5c_branch2a_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5c_branch2a_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512, 2048, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2c_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2c_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5b_branch2c_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048, 512, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2b_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2b_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5b_branch2a_weights@BroadCast_1']} = c_sync_calc_stream(inputs={X=['res5b_branch2a_weights@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Out=['bn5a_branch1_offset@BroadCast_1', 'bn5a_branch1_scale@BroadCast_1', 'res5a_branch1_weights@BroadCast_1', 'bn5a_branch2c_offset@BroadCast_1', 'bn5a_branch2c_scale@BroadCast_1', 'res5a_branch2c_weights', 'bn5a_branch2b_offset', 'bn5a_branch2b_scale', 'res5a_branch2b_weights', 'bn5a_branch2a_offset', 'bn5a_branch2a_scale', 'res5a_branch2a_weights', 'bn4f_branch2c_offset', 'bn4f_branch2c_scale', 'res4f_branch2c_weights', 'bn4f_branch2b_offset', 'bn4f_branch2b_scale', 'res4f_branch2b_weights', 'bn4f_branch2a_offset', 'bn4f_branch2a_scale', 'res4f_branch2a_weights', 'bn4e_branch2c_offset', 'bn4e_branch2c_scale', 'res4e_branch2c_weights', 'bn4e_branch2b_offset', 'bn4e_branch2b_scale', 'res4e_branch2b_weights', 'bn4e_branch2a_offset', 'bn4e_branch2a_scale', 'res4e_branch2a_weights', 'bn4d_branch2c_offset', 'bn4d_branch2c_scale', 'res4d_branch2c_weights']} = c_sync_comm_stream(inputs={X=['bn5a_branch1_offset@BroadCast_1', 'bn5a_branch1_scale@BroadCast_1', 'res5a_branch1_weights@BroadCast_1', 'bn5a_branch2c_offset@BroadCast_1', 'bn5a_branch2c_scale@BroadCast_1', 'res5a_branch2c_weights', 'bn5a_branch2b_offset', 'bn5a_branch2b_scale', 'res5a_branch2b_weights', 'bn5a_branch2a_offset', 'bn5a_branch2a_scale', 'res5a_branch2a_weights', 'bn4f_branch2c_offset', 'bn4f_branch2c_scale', 'res4f_branch2c_weights', 'bn4f_branch2b_offset', 'bn4f_branch2b_scale', 'res4f_branch2b_weights', 'bn4f_branch2a_offset', 'bn4f_branch2a_scale', 'res4f_branch2a_weights', 'bn4e_branch2c_offset', 'bn4e_branch2c_scale', 'res4e_branch2c_weights', 'bn4e_branch2b_offset', 'bn4e_branch2b_scale', 'res4e_branch2b_weights', 'bn4e_branch2a_offset', 'bn4e_branch2a_scale', 'res4e_branch2a_weights', 'bn4d_branch2c_offset', 'bn4d_branch2c_scale', 'res4d_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {Out=['res5b_branch2a_weights@BroadCast_1']} = c_broadcast(inputs={X=['res5b_branch2a_weights@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2a_scale@BroadCast_1']} = c_broadcast(inputs={X=['bn5b_branch2a_scale@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2a_offset@BroadCast_1']} = c_broadcast(inputs={X=['bn5b_branch2a_offset@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@BroadCast_1']} = c_broadcast(inputs={X=['res5b_branch2b_weights@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['fc_0.b_0@BroadCast_0']} = c_broadcast(inputs={X=['fc_0.b_0@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['fc_0.w_0@BroadCast_0']} = c_broadcast(inputs={X=['fc_0.w_0@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2c_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5c_branch2c_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2c_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5c_branch2c_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5c_branch2c_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5c_branch2c_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2b_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5c_branch2b_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2b_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5c_branch2b_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5c_branch2b_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5c_branch2b_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2a_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5c_branch2a_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2a_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5c_branch2a_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5c_branch2a_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5c_branch2a_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2c_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5b_branch2c_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2c_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5b_branch2c_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5b_branch2c_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5b_branch2c_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2b_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5b_branch2b_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2b_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5b_branch2b_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Output=['res4d_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4d_branch2c_weights'], Input=['bn4d_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4d_branch2c_mean'], ReserveSpace=['bn4d_branch2c.output.1.tmp_2'], SavedMean=['bn4d_branch2c.output.1.tmp_0'], SavedVariance=['bn4d_branch2c.output.1.tmp_1'], VarianceOut=['bn4d_branch2c_variance'], Y=['bn4d_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4d_branch2c_offset'], Mean=['bn4d_branch2c_mean'], MomentumTensor=[], Scale=['bn4d_branch2c_scale'], Variance=['bn4d_branch2c_variance'], X=['res4d_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res4d.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res4c.add.output.5.tmp_1'], Y=['bn4d_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res4d.add.output.5.tmp_1']} = relu(inputs={X=['res4d.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4e_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4e_branch2a_weights'], Input=['res4d.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4e_branch2a_mean'], ReserveSpace=['bn4e_branch2a.output.1.tmp_2'], SavedMean=['bn4e_branch2a.output.1.tmp_0'], SavedVariance=['bn4e_branch2a.output.1.tmp_1'], VarianceOut=['bn4e_branch2a_variance'], Y=['bn4e_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4e_branch2a_offset'], Mean=['bn4e_branch2a_mean'], MomentumTensor=[], Scale=['bn4e_branch2a_scale'], Variance=['bn4e_branch2a_variance'], X=['res4e_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4e_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn4e_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4e_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4e_branch2b_weights'], Input=['bn4e_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4e_branch2b_mean'], ReserveSpace=['bn4e_branch2b.output.1.tmp_2'], SavedMean=['bn4e_branch2b.output.1.tmp_0'], SavedVariance=['bn4e_branch2b.output.1.tmp_1'], VarianceOut=['bn4e_branch2b_variance'], Y=['bn4e_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4e_branch2b_offset'], Mean=['bn4e_branch2b_mean'], MomentumTensor=[], Scale=['bn4e_branch2b_scale'], Variance=['bn4e_branch2b_variance'], X=['res4e_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4e_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn4e_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4e_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4e_branch2c_weights'], Input=['bn4e_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4e_branch2c_mean'], ReserveSpace=['bn4e_branch2c.output.1.tmp_2'], SavedMean=['bn4e_branch2c.output.1.tmp_0'], SavedVariance=['bn4e_branch2c.output.1.tmp_1'], VarianceOut=['bn4e_branch2c_variance'], Y=['bn4e_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4e_branch2c_offset'], Mean=['bn4e_branch2c_mean'], MomentumTensor=[], Scale=['bn4e_branch2c_scale'], Variance=['bn4e_branch2c_variance'], X=['res4e_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res4e.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res4d.add.output.5.tmp_1'], Y=['bn4e_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res4e.add.output.5.tmp_1']} = relu(inputs={X=['res4e.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4f_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4f_branch2a_weights'], Input=['res4e.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4f_branch2a_mean'], ReserveSpace=['bn4f_branch2a.output.1.tmp_2'], SavedMean=['bn4f_branch2a.output.1.tmp_0'], SavedVariance=['bn4f_branch2a.output.1.tmp_1'], VarianceOut=['bn4f_branch2a_variance'], Y=['bn4f_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4f_branch2a_offset'], Mean=['bn4f_branch2a_mean'], MomentumTensor=[], Scale=['bn4f_branch2a_scale'], Variance=['bn4f_branch2a_variance'], X=['res4f_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4f_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn4f_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4f_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4f_branch2b_weights'], Input=['bn4f_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4f_branch2b_mean'], ReserveSpace=['bn4f_branch2b.output.1.tmp_2'], SavedMean=['bn4f_branch2b.output.1.tmp_0'], SavedVariance=['bn4f_branch2b.output.1.tmp_1'], VarianceOut=['bn4f_branch2b_variance'], Y=['bn4f_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4f_branch2b_offset'], Mean=['bn4f_branch2b_mean'], MomentumTensor=[], Scale=['bn4f_branch2b_scale'], Variance=['bn4f_branch2b_variance'], X=['res4f_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn4f_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn4f_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res4f_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res4f_branch2c_weights'], Input=['bn4f_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn4f_branch2c_mean'], ReserveSpace=['bn4f_branch2c.output.1.tmp_2'], SavedMean=['bn4f_branch2c.output.1.tmp_0'], SavedVariance=['bn4f_branch2c.output.1.tmp_1'], VarianceOut=['bn4f_branch2c_variance'], Y=['bn4f_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn4f_branch2c_offset'], Mean=['bn4f_branch2c_mean'], MomentumTensor=[], Scale=['bn4f_branch2c_scale'], Variance=['bn4f_branch2c_variance'], X=['res4f_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res4f.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res4e.add.output.5.tmp_1'], Y=['bn4f_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res4f.add.output.5.tmp_1']} = relu(inputs={X=['res4f.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5a_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5a_branch2a_weights'], Input=['res4f.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5a_branch2a_mean'], ReserveSpace=['bn5a_branch2a.output.1.tmp_2'], SavedMean=['bn5a_branch2a.output.1.tmp_0'], SavedVariance=['bn5a_branch2a.output.1.tmp_1'], VarianceOut=['bn5a_branch2a_variance'], Y=['bn5a_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5a_branch2a_offset'], Mean=['bn5a_branch2a_mean'], MomentumTensor=[], Scale=['bn5a_branch2a_scale'], Variance=['bn5a_branch2a_variance'], X=['res5a_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn5a_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn5a_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5a_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5a_branch2b_weights'], Input=['bn5a_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5a_branch2b_mean'], ReserveSpace=['bn5a_branch2b.output.1.tmp_2'], SavedMean=['bn5a_branch2b.output.1.tmp_0'], SavedVariance=['bn5a_branch2b.output.1.tmp_1'], VarianceOut=['bn5a_branch2b_variance'], Y=['bn5a_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5a_branch2b_offset'], Mean=['bn5a_branch2b_mean'], MomentumTensor=[], Scale=['bn5a_branch2b_scale'], Variance=['bn5a_branch2b_variance'], X=['res5a_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn5a_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn5a_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5a_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5a_branch2c_weights'], Input=['bn5a_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5a_branch2c_mean'], ReserveSpace=['bn5a_branch2c.output.1.tmp_2'], SavedMean=['bn5a_branch2c.output.1.tmp_0'], SavedVariance=['bn5a_branch2c.output.1.tmp_1'], VarianceOut=['bn5a_branch2c_variance'], Y=['bn5a_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5a_branch2c_offset@BroadCast_1'], Mean=['bn5a_branch2c_mean'], MomentumTensor=[], Scale=['bn5a_branch2c_scale@BroadCast_1'], Variance=['bn5a_branch2c_variance'], X=['res5a_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5a_branch1.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5a_branch1_weights@BroadCast_1'], Input=['res4f.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5a_branch1_mean'], ReserveSpace=['bn5a_branch1.output.1.tmp_2'], SavedMean=['bn5a_branch1.output.1.tmp_0'], SavedVariance=['bn5a_branch1.output.1.tmp_1'], VarianceOut=['bn5a_branch1_variance'], Y=['bn5a_branch1.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5a_branch1_offset@BroadCast_1'], Mean=['bn5a_branch1_mean'], MomentumTensor=[], Scale=['bn5a_branch1_scale@BroadCast_1'], Variance=['bn5a_branch1_variance'], X=['res5a_branch1.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res5a.add.output.5.tmp_0']} = elementwise_add(inputs={X=['bn5a_branch1.output.1.tmp_3'], Y=['bn5a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res5a.add.output.5.tmp_1']} = relu(inputs={X=['res5a.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512, 512, 3, 3], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2a_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5b_branch2a_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5b_branch2a_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [512, 2048, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch1_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch1_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5a_branch1_weights@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048, 1024, 1, 1], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch2c_scale@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['bn5a_branch2c_offset@BroadCast_0']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], place_type = -1, shape = [2048], str_value = , value = 0.0, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@BroadCast_0']} = c_sync_calc_stream(inputs={X=['res5b_branch2b_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Out=['bn5b_branch2b_offset@BroadCast_0', 'bn5b_branch2b_scale@BroadCast_0', 'res5b_branch2c_weights@BroadCast_0', 'bn5b_branch2c_offset@BroadCast_0', 'bn5b_branch2c_scale@BroadCast_0', 'res5c_branch2a_weights@BroadCast_0', 'bn5c_branch2a_offset@BroadCast_0', 'bn5c_branch2a_scale@BroadCast_0', 'res5c_branch2b_weights@BroadCast_0', 'bn5c_branch2b_offset@BroadCast_0', 'bn5c_branch2b_scale@BroadCast_0', 'res5c_branch2c_weights@BroadCast_0', 'bn5c_branch2c_offset@BroadCast_0', 'bn5c_branch2c_scale@BroadCast_0', 'fc_0.w_0@BroadCast_0', 'fc_0.b_0@BroadCast_0', 'res5b_branch2b_weights@BroadCast_1', 'bn5b_branch2a_offset@BroadCast_1', 'bn5b_branch2a_scale@BroadCast_1', 'res5b_branch2a_weights@BroadCast_1']} = c_sync_comm_stream(inputs={X=['bn5b_branch2b_offset@BroadCast_0', 'bn5b_branch2b_scale@BroadCast_0', 'res5b_branch2c_weights@BroadCast_0', 'bn5b_branch2c_offset@BroadCast_0', 'bn5b_branch2c_scale@BroadCast_0', 'res5c_branch2a_weights@BroadCast_0', 'bn5c_branch2a_offset@BroadCast_0', 'bn5c_branch2a_scale@BroadCast_0', 'res5c_branch2b_weights@BroadCast_0', 'bn5c_branch2b_offset@BroadCast_0', 'bn5c_branch2b_scale@BroadCast_0', 'res5c_branch2c_weights@BroadCast_0', 'bn5c_branch2c_offset@BroadCast_0', 'bn5c_branch2c_scale@BroadCast_0', 'fc_0.w_0@BroadCast_0', 'fc_0.b_0@BroadCast_0', 'res5b_branch2b_weights@BroadCast_1', 'bn5b_branch2a_offset@BroadCast_1', 'bn5b_branch2a_scale@BroadCast_1', 'res5b_branch2a_weights@BroadCast_1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5b_branch2b_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2a_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5b_branch2a_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2a_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5b_branch2a_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5b_branch2a_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5b_branch2a_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch1_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5a_branch1_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch1_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5a_branch1_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch1_weights@BroadCast_0']} = c_broadcast(inputs={X=['res5a_branch1_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2c_scale@BroadCast_0']} = c_broadcast(inputs={X=['bn5a_branch2c_scale@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2c_offset@BroadCast_0']} = c_broadcast(inputs={X=['bn5a_branch2c_offset@BroadCast_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2c_weights']} = c_broadcast(inputs={X=['res5a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2b_scale']} = c_broadcast(inputs={X=['bn5a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2b_offset']} = c_broadcast(inputs={X=['bn5a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2b_weights']} = c_broadcast(inputs={X=['res5a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2a_scale']} = c_broadcast(inputs={X=['bn5a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2a_offset']} = c_broadcast(inputs={X=['bn5a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2a_weights']} = c_broadcast(inputs={X=['res5a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_scale']} = c_broadcast(inputs={X=['bn4f_branch2c_scale']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_offset']} = c_broadcast(inputs={X=['bn4f_branch2c_offset']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Output=['res5b_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5b_branch2a_weights@BroadCast_1'], Input=['res5a.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5b_branch2a_mean'], ReserveSpace=['bn5b_branch2a.output.1.tmp_2'], SavedMean=['bn5b_branch2a.output.1.tmp_0'], SavedVariance=['bn5b_branch2a.output.1.tmp_1'], VarianceOut=['bn5b_branch2a_variance'], Y=['bn5b_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5b_branch2a_offset@BroadCast_1'], Mean=['bn5b_branch2a_mean'], MomentumTensor=[], Scale=['bn5b_branch2a_scale@BroadCast_1'], Variance=['bn5b_branch2a_variance'], X=['res5b_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn5b_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn5b_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5b_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5b_branch2b_weights@BroadCast_1'], Input=['bn5b_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5b_branch2b_mean'], ReserveSpace=['bn5b_branch2b.output.1.tmp_2'], SavedMean=['bn5b_branch2b.output.1.tmp_0'], SavedVariance=['bn5b_branch2b.output.1.tmp_1'], VarianceOut=['bn5b_branch2b_variance'], Y=['bn5b_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5b_branch2b_offset@BroadCast_0'], Mean=['bn5b_branch2b_mean'], MomentumTensor=[], Scale=['bn5b_branch2b_scale@BroadCast_0'], Variance=['bn5b_branch2b_variance'], X=['res5b_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn5b_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn5b_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5b_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5b_branch2c_weights@BroadCast_0'], Input=['bn5b_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5b_branch2c_mean'], ReserveSpace=['bn5b_branch2c.output.1.tmp_2'], SavedMean=['bn5b_branch2c.output.1.tmp_0'], SavedVariance=['bn5b_branch2c.output.1.tmp_1'], VarianceOut=['bn5b_branch2c_variance'], Y=['bn5b_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5b_branch2c_offset@BroadCast_0'], Mean=['bn5b_branch2c_mean'], MomentumTensor=[], Scale=['bn5b_branch2c_scale@BroadCast_0'], Variance=['bn5b_branch2c_variance'], X=['res5b_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res5b.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res5a.add.output.5.tmp_1'], Y=['bn5b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res5b.add.output.5.tmp_1']} = relu(inputs={X=['res5b.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5c_branch2a.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5c_branch2a_weights@BroadCast_0'], Input=['res5b.add.output.5.tmp_1'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5c_branch2a_mean'], ReserveSpace=['bn5c_branch2a.output.1.tmp_2'], SavedMean=['bn5c_branch2a.output.1.tmp_0'], SavedVariance=['bn5c_branch2a.output.1.tmp_1'], VarianceOut=['bn5c_branch2a_variance'], Y=['bn5c_branch2a.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5c_branch2a_offset@BroadCast_0'], Mean=['bn5c_branch2a_mean'], MomentumTensor=[], Scale=['bn5c_branch2a_scale@BroadCast_0'], Variance=['bn5c_branch2a_variance'], X=['res5c_branch2a.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn5c_branch2a.output.1.tmp_4']} = relu(inputs={X=['bn5c_branch2a.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5c_branch2b.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5c_branch2b_weights@BroadCast_0'], Input=['bn5c_branch2a.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5c_branch2b_mean'], ReserveSpace=['bn5c_branch2b.output.1.tmp_2'], SavedMean=['bn5c_branch2b.output.1.tmp_0'], SavedVariance=['bn5c_branch2b.output.1.tmp_1'], VarianceOut=['bn5c_branch2b_variance'], Y=['bn5c_branch2b.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5c_branch2b_offset@BroadCast_0'], Mean=['bn5c_branch2b_mean'], MomentumTensor=[], Scale=['bn5c_branch2b_scale@BroadCast_0'], Variance=['bn5c_branch2b_variance'], X=['res5c_branch2b.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['bn5c_branch2b.output.1.tmp_4']} = relu(inputs={X=['bn5c_branch2b.output.1.tmp_3']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Output=['res5c_branch2c.conv2d.output.1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['res5c_branch2c_weights@BroadCast_0'], Input=['bn5c_branch2b.output.1.tmp_4'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {MeanOut=['bn5c_branch2c_mean'], ReserveSpace=['bn5c_branch2c.output.1.tmp_2'], SavedMean=['bn5c_branch2c.output.1.tmp_0'], SavedVariance=['bn5c_branch2c.output.1.tmp_1'], VarianceOut=['bn5c_branch2c_variance'], Y=['bn5c_branch2c.output.1.tmp_3']} = batch_norm(inputs={Bias=['bn5c_branch2c_offset@BroadCast_0'], Mean=['bn5c_branch2c_mean'], MomentumTensor=[], Scale=['bn5c_branch2c_scale@BroadCast_0'], Variance=['bn5c_branch2c_variance'], X=['res5c_branch2c.conv2d.output.1.tmp_0']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 0, op_role_var = [], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res5c.add.output.5.tmp_0']} = elementwise_add(inputs={X=['res5b.add.output.5.tmp_1'], Y=['bn5c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Out=['res5c.add.output.5.tmp_1']} = relu(inputs={X=['res5c.add.output.5.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['pool2d_1.tmp_0']} = pool2d(inputs={X=['res5c.add.output.5.tmp_1']}, adaptive = False, ceil_mode = False, data_format = NCHW, exclusive = True, global_pooling = True, is_test = False, ksize = [-1, -1], mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], pooling_type = avg, strides = [1, 1], use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False)
    {Out=['fc_0.tmp_0']} = mul(inputs={X=['pool2d_1.tmp_0'], Y=['fc_0.w_0@BroadCast_0']}, force_fp32_output = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], scale_out = 1.0, scale_x = 1.0, scale_y = [1.0], use_mkldnn = False, with_quant_attr = False, x_num_col_dims = 1, y_num_col_dims = 1)
    {Out=['fc_0.tmp_1']} = elementwise_add(inputs={X=['fc_0.tmp_0'], Y=['fc_0.b_0@BroadCast_0']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = 1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Loss=['softmax_with_cross_entropy_0.tmp_1'], Softmax=['softmax_with_cross_entropy_0.tmp_0']} = softmax_with_cross_entropy(inputs={Label=['y'], Logits=['fc_0.tmp_1']}, axis = -1, ignore_index = -100, numeric_stable_mode = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], soft_label = False, use_softmax = True, with_quant_attr = False)
    {Out=['mean_0.tmp_0']} = reduce_mean(inputs={X=['softmax_with_cross_entropy_0.tmp_1']}, dim = [0], in_dtype = -1, keep_dim = False, op_device = , op_namescope = /, op_role = 256, op_role_var = [], out_dtype = -1, reduce_all = True, use_mkldnn = False, with_quant_attr = False)
    {Indices=['top_k_v2_0.tmp_1'], Out=['top_k_v2_0.tmp_0']} = top_k_v2(inputs={K=[], X=['fc_0.tmp_1']}, axis = -1, k = 1, largest = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], sorted = True, with_quant_attr = False)
    {Accuracy=['accuracy_0.tmp_0'], Correct=['accuracy_0.tmp_1'], Total=['accuracy_0.tmp_2']} = accuracy(inputs={Indices=['top_k_v2_0.tmp_1'], Label=['y'], Out=['top_k_v2_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Indices=['top_k_v2_1.tmp_1'], Out=['top_k_v2_1.tmp_0']} = top_k_v2(inputs={K=[], X=['fc_0.tmp_1']}, axis = -1, k = 5, largest = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], sorted = True, with_quant_attr = False)
    {Accuracy=['accuracy_1.tmp_0'], Correct=['accuracy_1.tmp_1'], Total=['accuracy_1.tmp_2']} = accuracy(inputs={Indices=['top_k_v2_1.tmp_1'], Label=['y'], Out=['top_k_v2_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], with_quant_attr = False)
    {Out=['mean_0.tmp_0@GRAD']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_device = , op_role = 257, shape = [1], value = 0.25)
    {X@GRAD=['softmax_with_cross_entropy_0.tmp_1@GRAD']} = reduce_mean_grad(inputs={Out@GRAD=['mean_0.tmp_0@GRAD'], X=['softmax_with_cross_entropy_0.tmp_1']}, dim = [0], in_dtype = -1, keep_dim = False, op_device = , op_namescope = /, op_role = 1, op_role_var = [], out_dtype = -1, reduce_all = True, use_mkldnn = False, with_quant_attr = False)
    {Logits@GRAD=['fc_0.tmp_1@GRAD']} = softmax_with_cross_entropy_grad(inputs={Label=['y'], Loss@GRAD=['softmax_with_cross_entropy_0.tmp_1@GRAD'], Softmax=['softmax_with_cross_entropy_0.tmp_0']}, axis = -1, ignore_index = -100, numeric_stable_mode = True, op_device = , op_namescope = /, op_role = 1, op_role_var = [], soft_label = False, use_softmax = True, with_quant_attr = False)
    {X@GRAD=['fc_0.tmp_0@GRAD'], Y@GRAD=['fc_0.b_0@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['fc_0.tmp_1@GRAD'], X=['fc_0.tmp_0'], Y=['fc_0.b_0@BroadCast_0']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = 1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['fc_0.b_0@BroadCast_0', 'fc_0.b_0@GRAD'], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {X@GRAD=['pool2d_1.tmp_0@GRAD'], Y@GRAD=['fc_0.w_0@GRAD']} = mul_grad(inputs={Out@GRAD=['fc_0.tmp_0@GRAD'], X=['pool2d_1.tmp_0'], Y=['fc_0.w_0@BroadCast_0']}, force_fp32_output = False, op_device = , op_namescope = /, op_role = 1, op_role_var = ['fc_0.w_0@BroadCast_0', 'fc_0.w_0@GRAD'], scale_out = 1.0, scale_x = 1.0, scale_y = [1.0], use_mkldnn = False, with_quant_attr = False, x_num_col_dims = 1, y_num_col_dims = 1)
    {X@GRAD=['res5c.add.output.5.tmp_1@GRAD']} = pool2d_grad(inputs={Out=['pool2d_1.tmp_0'], Out@GRAD=['pool2d_1.tmp_0@GRAD'], X=['res5c.add.output.5.tmp_1']}, adaptive = False, ceil_mode = False, data_format = NCHW, exclusive = True, global_pooling = True, is_test = False, ksize = [-1, -1], mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], pooling_type = avg, strides = [1, 1], use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False)
    {X@GRAD=['res5c.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res5c.add.output.5.tmp_1'], Out@GRAD=['res5c.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res5b.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn5c_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res5c.add.output.5.tmp_0@GRAD'], X=['res5b.add.output.5.tmp_1'], Y=['bn5c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn5c_branch2c_offset@GRAD'], Scale@GRAD=['bn5c_branch2c_scale@GRAD'], X@GRAD=['res5c_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5c_branch2c_offset@BroadCast_0'], ReserveSpace=['bn5c_branch2c.output.1.tmp_2'], SavedMean=['bn5c_branch2c.output.1.tmp_0'], SavedVariance=['bn5c_branch2c.output.1.tmp_1'], Scale=['bn5c_branch2c_scale@BroadCast_0'], X=['res5c_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn5c_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5c_branch2c_offset@BroadCast_0', 'bn5c_branch2c_offset@GRAD', 'bn5c_branch2c_scale@BroadCast_0', 'bn5c_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5c_branch2c_weights@GRAD'], Input@GRAD=['bn5c_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res5c_branch2c_weights@BroadCast_0'], Input=['bn5c_branch2b.output.1.tmp_4'], Output@GRAD=['res5c_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5c_branch2c_weights@BroadCast_0', 'res5c_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn5c_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn5c_branch2b.output.1.tmp_4'], Out@GRAD=['bn5c_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn5c_branch2b_offset@GRAD'], Scale@GRAD=['bn5c_branch2b_scale@GRAD'], X@GRAD=['res5c_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5c_branch2b_offset@BroadCast_0'], ReserveSpace=['bn5c_branch2b.output.1.tmp_2'], SavedMean=['bn5c_branch2b.output.1.tmp_0'], SavedVariance=['bn5c_branch2b.output.1.tmp_1'], Scale=['bn5c_branch2b_scale@BroadCast_0'], X=['res5c_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn5c_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5c_branch2b_offset@BroadCast_0', 'bn5c_branch2b_offset@GRAD', 'bn5c_branch2b_scale@BroadCast_0', 'bn5c_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5c_branch2b_weights@GRAD'], Input@GRAD=['bn5c_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res5c_branch2b_weights@BroadCast_0'], Input=['bn5c_branch2a.output.1.tmp_4'], Output@GRAD=['res5c_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5c_branch2b_weights@BroadCast_0', 'res5c_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn5c_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn5c_branch2a.output.1.tmp_4'], Out@GRAD=['bn5c_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn5c_branch2a_offset@GRAD'], Scale@GRAD=['bn5c_branch2a_scale@GRAD'], X@GRAD=['res5c_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5c_branch2a_offset@BroadCast_0'], ReserveSpace=['bn5c_branch2a.output.1.tmp_2'], SavedMean=['bn5c_branch2a.output.1.tmp_0'], SavedVariance=['bn5c_branch2a.output.1.tmp_1'], Scale=['bn5c_branch2a_scale@BroadCast_0'], X=['res5c_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn5c_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5c_branch2a_offset@BroadCast_0', 'bn5c_branch2a_offset@GRAD', 'bn5c_branch2a_scale@BroadCast_0', 'bn5c_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5c_branch2a_weights@GRAD'], Input@GRAD=['res5b.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res5c_branch2a_weights@BroadCast_0'], Input=['res5b.add.output.5.tmp_1'], Output@GRAD=['res5c_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5c_branch2a_weights@BroadCast_0', 'res5c_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res5b.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res5b.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res5b.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res5b.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res5b.add.output.5.tmp_1'], Out@GRAD=['res5b.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res5a.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn5b_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res5b.add.output.5.tmp_0@GRAD'], X=['res5a.add.output.5.tmp_1'], Y=['bn5b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn5b_branch2c_offset@GRAD'], Scale@GRAD=['bn5b_branch2c_scale@GRAD'], X@GRAD=['res5b_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5b_branch2c_offset@BroadCast_0'], ReserveSpace=['bn5b_branch2c.output.1.tmp_2'], SavedMean=['bn5b_branch2c.output.1.tmp_0'], SavedVariance=['bn5b_branch2c.output.1.tmp_1'], Scale=['bn5b_branch2c_scale@BroadCast_0'], X=['res5b_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn5b_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5b_branch2c_offset@BroadCast_0', 'bn5b_branch2c_offset@GRAD', 'bn5b_branch2c_scale@BroadCast_0', 'bn5b_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5b_branch2c_weights@GRAD'], Input@GRAD=['bn5b_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res5b_branch2c_weights@BroadCast_0'], Input=['bn5b_branch2b.output.1.tmp_4'], Output@GRAD=['res5b_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5b_branch2c_weights@BroadCast_0', 'res5b_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn5b_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn5b_branch2b.output.1.tmp_4'], Out@GRAD=['bn5b_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn5b_branch2b_offset@GRAD'], Scale@GRAD=['bn5b_branch2b_scale@GRAD'], X@GRAD=['res5b_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5b_branch2b_offset@BroadCast_0'], ReserveSpace=['bn5b_branch2b.output.1.tmp_2'], SavedMean=['bn5b_branch2b.output.1.tmp_0'], SavedVariance=['bn5b_branch2b.output.1.tmp_1'], Scale=['bn5b_branch2b_scale@BroadCast_0'], X=['res5b_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn5b_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5b_branch2b_offset@BroadCast_0', 'bn5b_branch2b_offset@GRAD', 'bn5b_branch2b_scale@BroadCast_0', 'bn5b_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['fc_0.b_0@GRAD']} = c_sync_calc_stream(inputs={X=['fc_0.b_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], with_quant_attr = False)
    {Out=['bn4f_branch2c_offset', 'bn4f_branch2c_scale', 'res5a_branch2a_weights', 'bn5a_branch2a_offset', 'bn5a_branch2a_scale', 'res5a_branch2b_weights', 'bn5a_branch2b_offset', 'bn5a_branch2b_scale', 'res5a_branch2c_weights', 'bn5a_branch2c_offset@BroadCast_0', 'bn5a_branch2c_scale@BroadCast_0', 'res5a_branch1_weights@BroadCast_0', 'bn5a_branch1_offset@BroadCast_0', 'bn5a_branch1_scale@BroadCast_0', 'res5b_branch2a_weights@BroadCast_0', 'bn5b_branch2a_offset@BroadCast_0', 'bn5b_branch2a_scale@BroadCast_0', 'res5b_branch2b_weights@BroadCast_0']} = c_sync_comm_stream(inputs={X=['bn4f_branch2c_offset', 'bn4f_branch2c_scale', 'res5a_branch2a_weights', 'bn5a_branch2a_offset', 'bn5a_branch2a_scale', 'res5a_branch2b_weights', 'bn5a_branch2b_offset', 'bn5a_branch2b_scale', 'res5a_branch2c_weights', 'bn5a_branch2c_offset@BroadCast_0', 'bn5a_branch2c_scale@BroadCast_0', 'res5a_branch1_weights@BroadCast_0', 'bn5a_branch1_offset@BroadCast_0', 'bn5a_branch1_scale@BroadCast_0', 'res5b_branch2a_weights@BroadCast_0', 'bn5b_branch2a_offset@BroadCast_0', 'bn5b_branch2a_scale@BroadCast_0', 'res5b_branch2b_weights@BroadCast_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {Out=['fc_0.b_0@GRAD']} = c_reduce_sum(inputs={X=['fc_0.b_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['fc_0.w_0@GRAD']} = c_reduce_sum(inputs={X=['fc_0.w_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5c_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5c_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5c_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res5c_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5c_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5c_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5c_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res5c_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5c_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5c_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5c_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5c_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res5c_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5b_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5b_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5b_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res5b_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5b_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5b_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2c_weights']} = c_broadcast(inputs={X=['res4f_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2b_scale']} = c_broadcast(inputs={X=['bn4f_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2b_offset']} = c_broadcast(inputs={X=['bn4f_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2b_weights']} = c_broadcast(inputs={X=['res4f_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2a_scale']} = c_broadcast(inputs={X=['bn4f_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2a_offset']} = c_broadcast(inputs={X=['bn4f_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2a_weights']} = c_broadcast(inputs={X=['res4f_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2c_scale']} = c_broadcast(inputs={X=['bn4e_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2c_offset']} = c_broadcast(inputs={X=['bn4e_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2c_weights']} = c_broadcast(inputs={X=['res4e_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2b_scale']} = c_broadcast(inputs={X=['bn4e_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2b_offset']} = c_broadcast(inputs={X=['bn4e_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2b_weights']} = c_broadcast(inputs={X=['res4e_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2a_scale']} = c_broadcast(inputs={X=['bn4e_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2a_offset']} = c_broadcast(inputs={X=['bn4e_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2a_weights']} = c_broadcast(inputs={X=['res4e_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2c_scale']} = c_broadcast(inputs={X=['bn4d_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2c_offset']} = c_broadcast(inputs={X=['bn4d_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2c_weights']} = c_broadcast(inputs={X=['res4d_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_scale']} = c_broadcast(inputs={X=['bn4d_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_offset']} = c_broadcast(inputs={X=['bn4d_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2b_weights']} = c_broadcast(inputs={X=['res4d_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2a_scale']} = c_broadcast(inputs={X=['bn4d_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2a_offset']} = c_broadcast(inputs={X=['bn4d_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2a_weights']} = c_broadcast(inputs={X=['res4d_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2c_scale']} = c_broadcast(inputs={X=['bn4c_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2c_offset']} = c_broadcast(inputs={X=['bn4c_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2c_weights']} = c_broadcast(inputs={X=['res4c_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2b_scale']} = c_broadcast(inputs={X=['bn4c_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2b_offset']} = c_broadcast(inputs={X=['bn4c_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2b_weights']} = c_broadcast(inputs={X=['res4c_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2a_scale']} = c_broadcast(inputs={X=['bn4c_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2a_offset']} = c_broadcast(inputs={X=['bn4c_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2a_weights']} = c_broadcast(inputs={X=['res4c_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2c_scale']} = c_broadcast(inputs={X=['bn4b_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2c_offset']} = c_broadcast(inputs={X=['bn4b_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2c_weights']} = c_broadcast(inputs={X=['res4b_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2b_scale']} = c_broadcast(inputs={X=['bn4b_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2b_offset']} = c_broadcast(inputs={X=['bn4b_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2b_weights']} = c_broadcast(inputs={X=['res4b_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2a_scale']} = c_broadcast(inputs={X=['bn4b_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2a_offset']} = c_broadcast(inputs={X=['bn4b_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2a_weights']} = c_broadcast(inputs={X=['res4b_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch1_scale']} = c_broadcast(inputs={X=['bn4a_branch1_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch1_offset']} = c_broadcast(inputs={X=['bn4a_branch1_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch1_weights']} = c_broadcast(inputs={X=['res4a_branch1_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2c_scale']} = c_broadcast(inputs={X=['bn4a_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2c_offset']} = c_broadcast(inputs={X=['bn4a_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2c_weights']} = c_broadcast(inputs={X=['res4a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2b_scale']} = c_broadcast(inputs={X=['bn4a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2b_offset']} = c_broadcast(inputs={X=['bn4a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2b_weights']} = c_broadcast(inputs={X=['res4a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2a_scale']} = c_broadcast(inputs={X=['bn4a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2a_offset']} = c_broadcast(inputs={X=['bn4a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2a_weights']} = c_broadcast(inputs={X=['res4a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2c_scale']} = c_broadcast(inputs={X=['bn3d_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2c_offset']} = c_broadcast(inputs={X=['bn3d_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2c_weights']} = c_broadcast(inputs={X=['res3d_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2b_scale']} = c_broadcast(inputs={X=['bn3d_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2b_offset']} = c_broadcast(inputs={X=['bn3d_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2b_weights']} = c_broadcast(inputs={X=['res3d_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2a_scale']} = c_broadcast(inputs={X=['bn3d_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2a_offset']} = c_broadcast(inputs={X=['bn3d_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2a_weights']} = c_broadcast(inputs={X=['res3d_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2c_scale']} = c_broadcast(inputs={X=['bn3c_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2c_offset']} = c_broadcast(inputs={X=['bn3c_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2c_weights']} = c_broadcast(inputs={X=['res3c_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2b_scale']} = c_broadcast(inputs={X=['bn3c_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2b_offset']} = c_broadcast(inputs={X=['bn3c_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2b_weights']} = c_broadcast(inputs={X=['res3c_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2a_scale']} = c_broadcast(inputs={X=['bn3c_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2a_offset']} = c_broadcast(inputs={X=['bn3c_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2a_weights']} = c_broadcast(inputs={X=['res3c_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2c_scale']} = c_broadcast(inputs={X=['bn3b_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2c_offset']} = c_broadcast(inputs={X=['bn3b_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2c_weights']} = c_broadcast(inputs={X=['res3b_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2b_scale']} = c_broadcast(inputs={X=['bn3b_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2b_offset']} = c_broadcast(inputs={X=['bn3b_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2b_weights']} = c_broadcast(inputs={X=['res3b_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2a_scale']} = c_broadcast(inputs={X=['bn3b_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2a_offset']} = c_broadcast(inputs={X=['bn3b_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2a_weights']} = c_broadcast(inputs={X=['res3b_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch1_scale']} = c_broadcast(inputs={X=['bn3a_branch1_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch1_offset']} = c_broadcast(inputs={X=['bn3a_branch1_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch1_weights']} = c_broadcast(inputs={X=['res3a_branch1_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2c_scale']} = c_broadcast(inputs={X=['bn3a_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2c_offset']} = c_broadcast(inputs={X=['bn3a_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2c_weights']} = c_broadcast(inputs={X=['res3a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2b_scale']} = c_broadcast(inputs={X=['bn3a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2b_offset']} = c_broadcast(inputs={X=['bn3a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2b_weights']} = c_broadcast(inputs={X=['res3a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2a_scale']} = c_broadcast(inputs={X=['bn3a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2a_offset']} = c_broadcast(inputs={X=['bn3a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2a_weights']} = c_broadcast(inputs={X=['res3a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2c_scale']} = c_broadcast(inputs={X=['bn2c_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2c_offset']} = c_broadcast(inputs={X=['bn2c_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2c_weights']} = c_broadcast(inputs={X=['res2c_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2b_scale']} = c_broadcast(inputs={X=['bn2c_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2b_offset']} = c_broadcast(inputs={X=['bn2c_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2b_weights']} = c_broadcast(inputs={X=['res2c_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2a_scale']} = c_broadcast(inputs={X=['bn2c_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2a_offset']} = c_broadcast(inputs={X=['bn2c_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2a_weights']} = c_broadcast(inputs={X=['res2c_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2c_scale']} = c_broadcast(inputs={X=['bn2b_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2c_offset']} = c_broadcast(inputs={X=['bn2b_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2c_weights']} = c_broadcast(inputs={X=['res2b_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2b_scale']} = c_broadcast(inputs={X=['bn2b_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2b_offset']} = c_broadcast(inputs={X=['bn2b_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2b_weights']} = c_broadcast(inputs={X=['res2b_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2a_scale']} = c_broadcast(inputs={X=['bn2b_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2a_offset']} = c_broadcast(inputs={X=['bn2b_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2a_weights']} = c_broadcast(inputs={X=['res2b_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch1_scale']} = c_broadcast(inputs={X=['bn2a_branch1_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch1_offset']} = c_broadcast(inputs={X=['bn2a_branch1_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch1_weights']} = c_broadcast(inputs={X=['res2a_branch1_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2c_scale']} = c_broadcast(inputs={X=['bn2a_branch2c_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2c_offset']} = c_broadcast(inputs={X=['bn2a_branch2c_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2c_weights']} = c_broadcast(inputs={X=['res2a_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2b_scale']} = c_broadcast(inputs={X=['bn2a_branch2b_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2b_offset']} = c_broadcast(inputs={X=['bn2a_branch2b_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2b_weights']} = c_broadcast(inputs={X=['res2a_branch2b_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2a_scale']} = c_broadcast(inputs={X=['bn2a_branch2a_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2a_offset']} = c_broadcast(inputs={X=['bn2a_branch2a_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2a_weights']} = c_broadcast(inputs={X=['res2a_branch2a_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn_conv1_scale']} = c_broadcast(inputs={X=['bn_conv1_scale']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn_conv1_offset']} = c_broadcast(inputs={X=['bn_conv1_offset']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['conv1_weights']} = c_broadcast(inputs={X=['conv1_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root = 0, use_calc_stream = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5b_branch2b_weights@GRAD'], Input@GRAD=['bn5b_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res5b_branch2b_weights@BroadCast_0'], Input=['bn5b_branch2a.output.1.tmp_4'], Output@GRAD=['res5b_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5b_branch2b_weights@BroadCast_0', 'res5b_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn5b_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn5b_branch2a.output.1.tmp_4'], Out@GRAD=['bn5b_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn5b_branch2a_offset@GRAD'], Scale@GRAD=['bn5b_branch2a_scale@GRAD'], X@GRAD=['res5b_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5b_branch2a_offset@BroadCast_0'], ReserveSpace=['bn5b_branch2a.output.1.tmp_2'], SavedMean=['bn5b_branch2a.output.1.tmp_0'], SavedVariance=['bn5b_branch2a.output.1.tmp_1'], Scale=['bn5b_branch2a_scale@BroadCast_0'], X=['res5b_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn5b_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5b_branch2a_offset@BroadCast_0', 'bn5b_branch2a_offset@GRAD', 'bn5b_branch2a_scale@BroadCast_0', 'bn5b_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5b_branch2a_weights@GRAD'], Input@GRAD=['res5a.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res5b_branch2a_weights@BroadCast_0'], Input=['res5a.add.output.5.tmp_1'], Output@GRAD=['res5b_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5b_branch2a_weights@BroadCast_0', 'res5b_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res5a.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res5a.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res5a.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res5a.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res5a.add.output.5.tmp_1'], Out@GRAD=['res5a.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['bn5a_branch1.output.1.tmp_3@GRAD'], Y@GRAD=['bn5a_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res5a.add.output.5.tmp_0@GRAD'], X=['bn5a_branch1.output.1.tmp_3'], Y=['bn5a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn5a_branch1_offset@GRAD'], Scale@GRAD=['bn5a_branch1_scale@GRAD'], X@GRAD=['res5a_branch1.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5a_branch1_offset@BroadCast_0'], ReserveSpace=['bn5a_branch1.output.1.tmp_2'], SavedMean=['bn5a_branch1.output.1.tmp_0'], SavedVariance=['bn5a_branch1.output.1.tmp_1'], Scale=['bn5a_branch1_scale@BroadCast_0'], X=['res5a_branch1.conv2d.output.1.tmp_0'], Y@GRAD=['bn5a_branch1.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5a_branch1_offset@BroadCast_0', 'bn5a_branch1_offset@GRAD', 'bn5a_branch1_scale@BroadCast_0', 'bn5a_branch1_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5a_branch1_weights@GRAD'], Input@GRAD=['res4f.add.output.5.tmp_1@GRAD@RENAME@block0@0']} = conv2d_grad(inputs={Bias=[], Filter=['res5a_branch1_weights@BroadCast_0'], Input=['res4f.add.output.5.tmp_1'], Output@GRAD=['res5a_branch1.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5a_branch1_weights@BroadCast_0', 'res5a_branch1_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Bias@GRAD=['bn5a_branch2c_offset@GRAD'], Scale@GRAD=['bn5a_branch2c_scale@GRAD'], X@GRAD=['res5a_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5a_branch2c_offset@BroadCast_0'], ReserveSpace=['bn5a_branch2c.output.1.tmp_2'], SavedMean=['bn5a_branch2c.output.1.tmp_0'], SavedVariance=['bn5a_branch2c.output.1.tmp_1'], Scale=['bn5a_branch2c_scale@BroadCast_0'], X=['res5a_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn5a_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5a_branch2c_offset@BroadCast_0', 'bn5a_branch2c_offset@GRAD', 'bn5a_branch2c_scale@BroadCast_0', 'bn5a_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5a_branch2c_weights@GRAD'], Input@GRAD=['bn5a_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res5a_branch2c_weights'], Input=['bn5a_branch2b.output.1.tmp_4'], Output@GRAD=['res5a_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5a_branch2c_weights', 'res5a_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn5a_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn5a_branch2b.output.1.tmp_4'], Out@GRAD=['bn5a_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn5a_branch2b_offset@GRAD'], Scale@GRAD=['bn5a_branch2b_scale@GRAD'], X@GRAD=['res5a_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5a_branch2b_offset'], ReserveSpace=['bn5a_branch2b.output.1.tmp_2'], SavedMean=['bn5a_branch2b.output.1.tmp_0'], SavedVariance=['bn5a_branch2b.output.1.tmp_1'], Scale=['bn5a_branch2b_scale'], X=['res5a_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn5a_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5a_branch2b_offset', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale', 'bn5a_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5a_branch2b_weights@GRAD'], Input@GRAD=['bn5a_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res5a_branch2b_weights'], Input=['bn5a_branch2a.output.1.tmp_4'], Output@GRAD=['res5a_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5a_branch2b_weights', 'res5a_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn5a_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn5a_branch2a.output.1.tmp_4'], Out@GRAD=['bn5a_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn5a_branch2a_offset@GRAD'], Scale@GRAD=['bn5a_branch2a_scale@GRAD'], X@GRAD=['res5a_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn5a_branch2a_offset'], ReserveSpace=['bn5a_branch2a.output.1.tmp_2'], SavedMean=['bn5a_branch2a.output.1.tmp_0'], SavedVariance=['bn5a_branch2a.output.1.tmp_1'], Scale=['bn5a_branch2a_scale'], X=['res5a_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn5a_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn5a_branch2a_offset', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale', 'bn5a_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res5a_branch2a_weights@GRAD'], Input@GRAD=['res4f.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res5a_branch2a_weights'], Input=['res4f.add.output.5.tmp_1'], Output@GRAD=['res5a_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res5a_branch2a_weights', 'res5a_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4f.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res4f.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res4f.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res4f.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res4f.add.output.5.tmp_1'], Out@GRAD=['res4f.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res4e.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn4f_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res4f.add.output.5.tmp_0@GRAD'], X=['res4e.add.output.5.tmp_1'], Y=['bn4f_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn4f_branch2c_offset@GRAD'], Scale@GRAD=['bn4f_branch2c_scale@GRAD'], X@GRAD=['res4f_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4f_branch2c_offset'], ReserveSpace=['bn4f_branch2c.output.1.tmp_2'], SavedMean=['bn4f_branch2c.output.1.tmp_0'], SavedVariance=['bn4f_branch2c.output.1.tmp_1'], Scale=['bn4f_branch2c_scale'], X=['res4f_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn4f_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4f_branch2c_offset', 'bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale', 'bn4f_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@GRAD']} = c_sync_calc_stream(inputs={X=['res5b_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], with_quant_attr = False)
    {Out=['bn5b_branch2b_offset@GRAD', 'bn5b_branch2b_scale@GRAD', 'res5b_branch2c_weights@GRAD', 'bn5b_branch2c_offset@GRAD', 'bn5b_branch2c_scale@GRAD', 'res5c_branch2a_weights@GRAD', 'bn5c_branch2a_offset@GRAD', 'bn5c_branch2a_scale@GRAD', 'res5c_branch2b_weights@GRAD', 'bn5c_branch2b_offset@GRAD', 'bn5c_branch2b_scale@GRAD', 'res5c_branch2c_weights@GRAD', 'bn5c_branch2c_offset@GRAD', 'bn5c_branch2c_scale@GRAD', 'fc_0.w_0@GRAD', 'fc_0.b_0@GRAD', 'conv1_weights', 'bn_conv1_offset', 'bn_conv1_scale', 'res2a_branch2a_weights', 'bn2a_branch2a_offset', 'bn2a_branch2a_scale', 'res2a_branch2b_weights', 'bn2a_branch2b_offset', 'bn2a_branch2b_scale', 'res2a_branch2c_weights', 'bn2a_branch2c_offset', 'bn2a_branch2c_scale', 'res2a_branch1_weights', 'bn2a_branch1_offset', 'bn2a_branch1_scale', 'res2b_branch2a_weights', 'bn2b_branch2a_offset', 'bn2b_branch2a_scale', 'res2b_branch2b_weights', 'bn2b_branch2b_offset', 'bn2b_branch2b_scale', 'res2b_branch2c_weights', 'bn2b_branch2c_offset', 'bn2b_branch2c_scale', 'res2c_branch2a_weights', 'bn2c_branch2a_offset', 'bn2c_branch2a_scale', 'res2c_branch2b_weights', 'bn2c_branch2b_offset', 'bn2c_branch2b_scale', 'res2c_branch2c_weights', 'bn2c_branch2c_offset', 'bn2c_branch2c_scale', 'res3a_branch2a_weights', 'bn3a_branch2a_offset', 'bn3a_branch2a_scale', 'res3a_branch2b_weights', 'bn3a_branch2b_offset', 'bn3a_branch2b_scale', 'res3a_branch2c_weights', 'bn3a_branch2c_offset', 'bn3a_branch2c_scale', 'res3a_branch1_weights', 'bn3a_branch1_offset', 'bn3a_branch1_scale', 'res3b_branch2a_weights', 'bn3b_branch2a_offset', 'bn3b_branch2a_scale', 'res3b_branch2b_weights', 'bn3b_branch2b_offset', 'bn3b_branch2b_scale', 'res3b_branch2c_weights', 'bn3b_branch2c_offset', 'bn3b_branch2c_scale', 'res3c_branch2a_weights', 'bn3c_branch2a_offset', 'bn3c_branch2a_scale', 'res3c_branch2b_weights', 'bn3c_branch2b_offset', 'bn3c_branch2b_scale', 'res3c_branch2c_weights', 'bn3c_branch2c_offset', 'bn3c_branch2c_scale', 'res3d_branch2a_weights', 'bn3d_branch2a_offset', 'bn3d_branch2a_scale', 'res3d_branch2b_weights', 'bn3d_branch2b_offset', 'bn3d_branch2b_scale', 'res3d_branch2c_weights', 'bn3d_branch2c_offset', 'bn3d_branch2c_scale', 'res4a_branch2a_weights', 'bn4a_branch2a_offset', 'bn4a_branch2a_scale', 'res4a_branch2b_weights', 'bn4a_branch2b_offset', 'bn4a_branch2b_scale', 'res4a_branch2c_weights', 'bn4a_branch2c_offset', 'bn4a_branch2c_scale', 'res4a_branch1_weights', 'bn4a_branch1_offset', 'bn4a_branch1_scale', 'res4b_branch2a_weights', 'bn4b_branch2a_offset', 'bn4b_branch2a_scale', 'res4b_branch2b_weights', 'bn4b_branch2b_offset', 'bn4b_branch2b_scale', 'res4b_branch2c_weights', 'bn4b_branch2c_offset', 'bn4b_branch2c_scale', 'res4c_branch2a_weights', 'bn4c_branch2a_offset', 'bn4c_branch2a_scale', 'res4c_branch2b_weights', 'bn4c_branch2b_offset', 'bn4c_branch2b_scale', 'res4c_branch2c_weights', 'bn4c_branch2c_offset', 'bn4c_branch2c_scale', 'res4d_branch2a_weights', 'bn4d_branch2a_offset', 'bn4d_branch2a_scale', 'res4d_branch2b_weights', 'bn4d_branch2b_offset', 'bn4d_branch2b_scale', 'res4d_branch2c_weights', 'bn4d_branch2c_offset', 'bn4d_branch2c_scale', 'res4e_branch2a_weights', 'bn4e_branch2a_offset', 'bn4e_branch2a_scale', 'res4e_branch2b_weights', 'bn4e_branch2b_offset', 'bn4e_branch2b_scale', 'res4e_branch2c_weights', 'bn4e_branch2c_offset', 'bn4e_branch2c_scale', 'res4f_branch2a_weights', 'bn4f_branch2a_offset', 'bn4f_branch2a_scale', 'res4f_branch2b_weights', 'bn4f_branch2b_offset', 'bn4f_branch2b_scale', 'res4f_branch2c_weights']} = c_sync_comm_stream(inputs={X=['bn5b_branch2b_offset@GRAD', 'bn5b_branch2b_scale@GRAD', 'res5b_branch2c_weights@GRAD', 'bn5b_branch2c_offset@GRAD', 'bn5b_branch2c_scale@GRAD', 'res5c_branch2a_weights@GRAD', 'bn5c_branch2a_offset@GRAD', 'bn5c_branch2a_scale@GRAD', 'res5c_branch2b_weights@GRAD', 'bn5c_branch2b_offset@GRAD', 'bn5c_branch2b_scale@GRAD', 'res5c_branch2c_weights@GRAD', 'bn5c_branch2c_offset@GRAD', 'bn5c_branch2c_scale@GRAD', 'fc_0.w_0@GRAD', 'fc_0.b_0@GRAD', 'conv1_weights', 'bn_conv1_offset', 'bn_conv1_scale', 'res2a_branch2a_weights', 'bn2a_branch2a_offset', 'bn2a_branch2a_scale', 'res2a_branch2b_weights', 'bn2a_branch2b_offset', 'bn2a_branch2b_scale', 'res2a_branch2c_weights', 'bn2a_branch2c_offset', 'bn2a_branch2c_scale', 'res2a_branch1_weights', 'bn2a_branch1_offset', 'bn2a_branch1_scale', 'res2b_branch2a_weights', 'bn2b_branch2a_offset', 'bn2b_branch2a_scale', 'res2b_branch2b_weights', 'bn2b_branch2b_offset', 'bn2b_branch2b_scale', 'res2b_branch2c_weights', 'bn2b_branch2c_offset', 'bn2b_branch2c_scale', 'res2c_branch2a_weights', 'bn2c_branch2a_offset', 'bn2c_branch2a_scale', 'res2c_branch2b_weights', 'bn2c_branch2b_offset', 'bn2c_branch2b_scale', 'res2c_branch2c_weights', 'bn2c_branch2c_offset', 'bn2c_branch2c_scale', 'res3a_branch2a_weights', 'bn3a_branch2a_offset', 'bn3a_branch2a_scale', 'res3a_branch2b_weights', 'bn3a_branch2b_offset', 'bn3a_branch2b_scale', 'res3a_branch2c_weights', 'bn3a_branch2c_offset', 'bn3a_branch2c_scale', 'res3a_branch1_weights', 'bn3a_branch1_offset', 'bn3a_branch1_scale', 'res3b_branch2a_weights', 'bn3b_branch2a_offset', 'bn3b_branch2a_scale', 'res3b_branch2b_weights', 'bn3b_branch2b_offset', 'bn3b_branch2b_scale', 'res3b_branch2c_weights', 'bn3b_branch2c_offset', 'bn3b_branch2c_scale', 'res3c_branch2a_weights', 'bn3c_branch2a_offset', 'bn3c_branch2a_scale', 'res3c_branch2b_weights', 'bn3c_branch2b_offset', 'bn3c_branch2b_scale', 'res3c_branch2c_weights', 'bn3c_branch2c_offset', 'bn3c_branch2c_scale', 'res3d_branch2a_weights', 'bn3d_branch2a_offset', 'bn3d_branch2a_scale', 'res3d_branch2b_weights', 'bn3d_branch2b_offset', 'bn3d_branch2b_scale', 'res3d_branch2c_weights', 'bn3d_branch2c_offset', 'bn3d_branch2c_scale', 'res4a_branch2a_weights', 'bn4a_branch2a_offset', 'bn4a_branch2a_scale', 'res4a_branch2b_weights', 'bn4a_branch2b_offset', 'bn4a_branch2b_scale', 'res4a_branch2c_weights', 'bn4a_branch2c_offset', 'bn4a_branch2c_scale', 'res4a_branch1_weights', 'bn4a_branch1_offset', 'bn4a_branch1_scale', 'res4b_branch2a_weights', 'bn4b_branch2a_offset', 'bn4b_branch2a_scale', 'res4b_branch2b_weights', 'bn4b_branch2b_offset', 'bn4b_branch2b_scale', 'res4b_branch2c_weights', 'bn4b_branch2c_offset', 'bn4b_branch2c_scale', 'res4c_branch2a_weights', 'bn4c_branch2a_offset', 'bn4c_branch2a_scale', 'res4c_branch2b_weights', 'bn4c_branch2b_offset', 'bn4c_branch2b_scale', 'res4c_branch2c_weights', 'bn4c_branch2c_offset', 'bn4c_branch2c_scale', 'res4d_branch2a_weights', 'bn4d_branch2a_offset', 'bn4d_branch2a_scale', 'res4d_branch2b_weights', 'bn4d_branch2b_offset', 'bn4d_branch2b_scale', 'res4d_branch2c_weights', 'bn4d_branch2c_offset', 'bn4d_branch2c_scale', 'res4e_branch2a_weights', 'bn4e_branch2a_offset', 'bn4e_branch2a_scale', 'res4e_branch2b_weights', 'bn4e_branch2b_offset', 'bn4e_branch2b_scale', 'res4e_branch2c_weights', 'bn4e_branch2c_offset', 'bn4e_branch2c_scale', 'res4f_branch2a_weights', 'bn4f_branch2a_offset', 'bn4f_branch2a_scale', 'res4f_branch2b_weights', 'bn4f_branch2b_offset', 'bn4f_branch2b_scale', 'res4f_branch2c_weights']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {Out=['res5b_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res5b_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5b_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5b_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5b_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5b_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res5b_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch1_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch1_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch1_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch1_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch1_weights@GRAD']} = c_reduce_sum(inputs={X=['res5a_branch1_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 1, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res5a_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res5a_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn5a_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn5a_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res5a_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res5a_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4f_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4f_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale@GRAD', 'res5a_branch2a_weights@GRAD', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale@GRAD', 'res5a_branch2b_weights@GRAD', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale@GRAD', 'res5a_branch2c_weights@GRAD', 'bn5a_branch2c_offset@GRAD', 'bn5a_branch2c_scale@GRAD', 'res5a_branch1_weights@GRAD', 'bn5a_branch1_offset@GRAD', 'bn5a_branch1_scale@GRAD', 'res5b_branch2a_weights@GRAD', 'bn5b_branch2a_offset@GRAD', 'bn5b_branch2a_scale@GRAD', 'res5b_branch2b_weights@GRAD']} = c_sync_comm_stream(inputs={X=['bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale@GRAD', 'res5a_branch2a_weights@GRAD', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale@GRAD', 'res5a_branch2b_weights@GRAD', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale@GRAD', 'res5a_branch2c_weights@GRAD', 'bn5a_branch2c_offset@GRAD', 'bn5a_branch2c_scale@GRAD', 'res5a_branch1_weights@GRAD', 'bn5a_branch1_offset@GRAD', 'bn5a_branch1_scale@GRAD', 'res5b_branch2a_weights@GRAD', 'bn5b_branch2a_offset@GRAD', 'bn5b_branch2a_scale@GRAD', 'res5b_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {FusedOutput=['FusedGrad_bn4f_branch2c_offset@GRAD_0'], Output=['bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale@GRAD', 'res5a_branch2a_weights@GRAD', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale@GRAD', 'res5a_branch2b_weights@GRAD', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale@GRAD', 'res5a_branch2c_weights@GRAD']} = coalesce_tensor(inputs={Input=['bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale@GRAD', 'res5a_branch2a_weights@GRAD', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale@GRAD', 'res5a_branch2b_weights@GRAD', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale@GRAD', 'res5a_branch2c_weights@GRAD']}, align_size = -1, check_name = False, constant = 0.0, copy_data = True, dtype = 5, op_device = , op_namescope = /, op_role = 1, op_role_var = [], persist_output = False, set_constant = False, use_align = True, user_defined_size_of_dtype = -1, with_quant_attr = False)
    {Out=['FusedGrad_bn4f_branch2c_offset@GRAD_0']} = c_sync_calc_stream(inputs={X=['FusedGrad_bn4f_branch2c_offset@GRAD_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], with_quant_attr = False)
    {Out=['FusedGrad_bn4f_branch2c_offset@GRAD_0']} = c_allreduce_sum(inputs={X=['FusedGrad_bn4f_branch2c_offset@GRAD_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 2, use_calc_stream = False, use_model_parallel = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4f_branch2c_weights@GRAD'], Input@GRAD=['bn4f_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4f_branch2c_weights'], Input=['bn4f_branch2b.output.1.tmp_4'], Output@GRAD=['res4f_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4f_branch2c_weights', 'res4f_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4f_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4f_branch2b.output.1.tmp_4'], Out@GRAD=['bn4f_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4f_branch2b_offset@GRAD'], Scale@GRAD=['bn4f_branch2b_scale@GRAD'], X@GRAD=['res4f_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4f_branch2b_offset'], ReserveSpace=['bn4f_branch2b.output.1.tmp_2'], SavedMean=['bn4f_branch2b.output.1.tmp_0'], SavedVariance=['bn4f_branch2b.output.1.tmp_1'], Scale=['bn4f_branch2b_scale'], X=['res4f_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn4f_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4f_branch2b_offset', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale', 'bn4f_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4f_branch2b_weights@GRAD'], Input@GRAD=['bn4f_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4f_branch2b_weights'], Input=['bn4f_branch2a.output.1.tmp_4'], Output@GRAD=['res4f_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4f_branch2b_weights', 'res4f_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4f_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4f_branch2a.output.1.tmp_4'], Out@GRAD=['bn4f_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4f_branch2a_offset@GRAD'], Scale@GRAD=['bn4f_branch2a_scale@GRAD'], X@GRAD=['res4f_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4f_branch2a_offset'], ReserveSpace=['bn4f_branch2a.output.1.tmp_2'], SavedMean=['bn4f_branch2a.output.1.tmp_0'], SavedVariance=['bn4f_branch2a.output.1.tmp_1'], Scale=['bn4f_branch2a_scale'], X=['res4f_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn4f_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4f_branch2a_offset', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale', 'bn4f_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4f_branch2a_weights@GRAD'], Input@GRAD=['res4e.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res4f_branch2a_weights'], Input=['res4e.add.output.5.tmp_1'], Output@GRAD=['res4f_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4f_branch2a_weights', 'res4f_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4e.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res4e.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res4e.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res4e.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res4e.add.output.5.tmp_1'], Out@GRAD=['res4e.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res4d.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn4e_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res4e.add.output.5.tmp_0@GRAD'], X=['res4d.add.output.5.tmp_1'], Y=['bn4e_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn4e_branch2c_offset@GRAD'], Scale@GRAD=['bn4e_branch2c_scale@GRAD'], X@GRAD=['res4e_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4e_branch2c_offset'], ReserveSpace=['bn4e_branch2c.output.1.tmp_2'], SavedMean=['bn4e_branch2c.output.1.tmp_0'], SavedVariance=['bn4e_branch2c.output.1.tmp_1'], Scale=['bn4e_branch2c_scale'], X=['res4e_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn4e_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4e_branch2c_offset', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale', 'bn4e_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4e_branch2c_weights@GRAD'], Input@GRAD=['bn4e_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4e_branch2c_weights'], Input=['bn4e_branch2b.output.1.tmp_4'], Output@GRAD=['res4e_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4e_branch2c_weights', 'res4e_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4e_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4e_branch2b.output.1.tmp_4'], Out@GRAD=['bn4e_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4e_branch2b_offset@GRAD'], Scale@GRAD=['bn4e_branch2b_scale@GRAD'], X@GRAD=['res4e_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4e_branch2b_offset'], ReserveSpace=['bn4e_branch2b.output.1.tmp_2'], SavedMean=['bn4e_branch2b.output.1.tmp_0'], SavedVariance=['bn4e_branch2b.output.1.tmp_1'], Scale=['bn4e_branch2b_scale'], X=['res4e_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn4e_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4e_branch2b_offset', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale', 'bn4e_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4e_branch2b_weights@GRAD'], Input@GRAD=['bn4e_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4e_branch2b_weights'], Input=['bn4e_branch2a.output.1.tmp_4'], Output@GRAD=['res4e_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4e_branch2b_weights', 'res4e_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4e_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4e_branch2a.output.1.tmp_4'], Out@GRAD=['bn4e_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4e_branch2a_offset@GRAD'], Scale@GRAD=['bn4e_branch2a_scale@GRAD'], X@GRAD=['res4e_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4e_branch2a_offset'], ReserveSpace=['bn4e_branch2a.output.1.tmp_2'], SavedMean=['bn4e_branch2a.output.1.tmp_0'], SavedVariance=['bn4e_branch2a.output.1.tmp_1'], Scale=['bn4e_branch2a_scale'], X=['res4e_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn4e_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4e_branch2a_offset', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale', 'bn4e_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4e_branch2a_weights@GRAD'], Input@GRAD=['res4d.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res4e_branch2a_weights'], Input=['res4d.add.output.5.tmp_1'], Output@GRAD=['res4e_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4e_branch2a_weights', 'res4e_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4d.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res4d.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res4d.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res4d.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res4d.add.output.5.tmp_1'], Out@GRAD=['res4d.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res4c.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn4d_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res4d.add.output.5.tmp_0@GRAD'], X=['res4c.add.output.5.tmp_1'], Y=['bn4d_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn4d_branch2c_offset@GRAD'], Scale@GRAD=['bn4d_branch2c_scale@GRAD'], X@GRAD=['res4d_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4d_branch2c_offset'], ReserveSpace=['bn4d_branch2c.output.1.tmp_2'], SavedMean=['bn4d_branch2c.output.1.tmp_0'], SavedVariance=['bn4d_branch2c.output.1.tmp_1'], Scale=['bn4d_branch2c_scale'], X=['res4d_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn4d_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4d_branch2c_offset', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale', 'bn4d_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4d_branch2c_weights@GRAD'], Input@GRAD=['bn4d_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4d_branch2c_weights'], Input=['bn4d_branch2b.output.1.tmp_4'], Output@GRAD=['res4d_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4d_branch2c_weights', 'res4d_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4d_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4d_branch2b.output.1.tmp_4'], Out@GRAD=['bn4d_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4d_branch2b_offset@GRAD'], Scale@GRAD=['bn4d_branch2b_scale@GRAD'], X@GRAD=['res4d_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4d_branch2b_offset'], ReserveSpace=['bn4d_branch2b.output.1.tmp_2'], SavedMean=['bn4d_branch2b.output.1.tmp_0'], SavedVariance=['bn4d_branch2b.output.1.tmp_1'], Scale=['bn4d_branch2b_scale'], X=['res4d_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn4d_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4d_branch2b_offset', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale', 'bn4d_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4d_branch2b_weights@GRAD'], Input@GRAD=['bn4d_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4d_branch2b_weights'], Input=['bn4d_branch2a.output.1.tmp_4'], Output@GRAD=['res4d_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4d_branch2b_weights', 'res4d_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4d_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4d_branch2a.output.1.tmp_4'], Out@GRAD=['bn4d_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4d_branch2a_offset@GRAD'], Scale@GRAD=['bn4d_branch2a_scale@GRAD'], X@GRAD=['res4d_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4d_branch2a_offset'], ReserveSpace=['bn4d_branch2a.output.1.tmp_2'], SavedMean=['bn4d_branch2a.output.1.tmp_0'], SavedVariance=['bn4d_branch2a.output.1.tmp_1'], Scale=['bn4d_branch2a_scale'], X=['res4d_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn4d_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4d_branch2a_offset', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale', 'bn4d_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4d_branch2a_weights@GRAD'], Input@GRAD=['res4c.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res4d_branch2a_weights'], Input=['res4c.add.output.5.tmp_1'], Output@GRAD=['res4d_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4d_branch2a_weights', 'res4d_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4c.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res4c.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res4c.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res4c.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res4c.add.output.5.tmp_1'], Out@GRAD=['res4c.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res4b.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn4c_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res4c.add.output.5.tmp_0@GRAD'], X=['res4b.add.output.5.tmp_1'], Y=['bn4c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn4c_branch2c_offset@GRAD'], Scale@GRAD=['bn4c_branch2c_scale@GRAD'], X@GRAD=['res4c_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4c_branch2c_offset'], ReserveSpace=['bn4c_branch2c.output.1.tmp_2'], SavedMean=['bn4c_branch2c.output.1.tmp_0'], SavedVariance=['bn4c_branch2c.output.1.tmp_1'], Scale=['bn4c_branch2c_scale'], X=['res4c_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn4c_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4c_branch2c_offset', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale', 'bn4c_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4c_branch2c_weights@GRAD'], Input@GRAD=['bn4c_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4c_branch2c_weights'], Input=['bn4c_branch2b.output.1.tmp_4'], Output@GRAD=['res4c_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4c_branch2c_weights', 'res4c_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4c_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4c_branch2b.output.1.tmp_4'], Out@GRAD=['bn4c_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4c_branch2b_offset@GRAD'], Scale@GRAD=['bn4c_branch2b_scale@GRAD'], X@GRAD=['res4c_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4c_branch2b_offset'], ReserveSpace=['bn4c_branch2b.output.1.tmp_2'], SavedMean=['bn4c_branch2b.output.1.tmp_0'], SavedVariance=['bn4c_branch2b.output.1.tmp_1'], Scale=['bn4c_branch2b_scale'], X=['res4c_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn4c_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4c_branch2b_offset', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale', 'bn4c_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4c_branch2b_weights@GRAD'], Input@GRAD=['bn4c_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4c_branch2b_weights'], Input=['bn4c_branch2a.output.1.tmp_4'], Output@GRAD=['res4c_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4c_branch2b_weights', 'res4c_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4c_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4c_branch2a.output.1.tmp_4'], Out@GRAD=['bn4c_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4c_branch2a_offset@GRAD'], Scale@GRAD=['bn4c_branch2a_scale@GRAD'], X@GRAD=['res4c_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4c_branch2a_offset'], ReserveSpace=['bn4c_branch2a.output.1.tmp_2'], SavedMean=['bn4c_branch2a.output.1.tmp_0'], SavedVariance=['bn4c_branch2a.output.1.tmp_1'], Scale=['bn4c_branch2a_scale'], X=['res4c_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn4c_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4c_branch2a_offset', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale', 'bn4c_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4c_branch2a_weights@GRAD'], Input@GRAD=['res4b.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res4c_branch2a_weights'], Input=['res4b.add.output.5.tmp_1'], Output@GRAD=['res4c_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4c_branch2a_weights', 'res4c_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4b.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res4b.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res4b.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res4b.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res4b.add.output.5.tmp_1'], Out@GRAD=['res4b.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res4a.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn4b_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res4b.add.output.5.tmp_0@GRAD'], X=['res4a.add.output.5.tmp_1'], Y=['bn4b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn4b_branch2c_offset@GRAD'], Scale@GRAD=['bn4b_branch2c_scale@GRAD'], X@GRAD=['res4b_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4b_branch2c_offset'], ReserveSpace=['bn4b_branch2c.output.1.tmp_2'], SavedMean=['bn4b_branch2c.output.1.tmp_0'], SavedVariance=['bn4b_branch2c.output.1.tmp_1'], Scale=['bn4b_branch2c_scale'], X=['res4b_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn4b_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4b_branch2c_offset', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale', 'bn4b_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4b_branch2c_weights@GRAD'], Input@GRAD=['bn4b_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4b_branch2c_weights'], Input=['bn4b_branch2b.output.1.tmp_4'], Output@GRAD=['res4b_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4b_branch2c_weights', 'res4b_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4b_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4b_branch2b.output.1.tmp_4'], Out@GRAD=['bn4b_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4b_branch2b_offset@GRAD'], Scale@GRAD=['bn4b_branch2b_scale@GRAD'], X@GRAD=['res4b_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4b_branch2b_offset'], ReserveSpace=['bn4b_branch2b.output.1.tmp_2'], SavedMean=['bn4b_branch2b.output.1.tmp_0'], SavedVariance=['bn4b_branch2b.output.1.tmp_1'], Scale=['bn4b_branch2b_scale'], X=['res4b_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn4b_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4b_branch2b_offset', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale', 'bn4b_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4b_branch2b_weights@GRAD'], Input@GRAD=['bn4b_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4b_branch2b_weights'], Input=['bn4b_branch2a.output.1.tmp_4'], Output@GRAD=['res4b_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4b_branch2b_weights', 'res4b_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4b_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4b_branch2a.output.1.tmp_4'], Out@GRAD=['bn4b_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4b_branch2a_offset@GRAD'], Scale@GRAD=['bn4b_branch2a_scale@GRAD'], X@GRAD=['res4b_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4b_branch2a_offset'], ReserveSpace=['bn4b_branch2a.output.1.tmp_2'], SavedMean=['bn4b_branch2a.output.1.tmp_0'], SavedVariance=['bn4b_branch2a.output.1.tmp_1'], Scale=['bn4b_branch2a_scale'], X=['res4b_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn4b_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4b_branch2a_offset', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale', 'bn4b_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4b_branch2a_weights@GRAD'], Input@GRAD=['res4a.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res4b_branch2a_weights'], Input=['res4a.add.output.5.tmp_1'], Output@GRAD=['res4b_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4b_branch2a_weights', 'res4b_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4a.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res4a.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res4a.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res4a.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res4a.add.output.5.tmp_1'], Out@GRAD=['res4a.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['bn4a_branch1.output.1.tmp_3@GRAD'], Y@GRAD=['bn4a_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res4a.add.output.5.tmp_0@GRAD'], X=['bn4a_branch1.output.1.tmp_3'], Y=['bn4a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn4a_branch1_offset@GRAD'], Scale@GRAD=['bn4a_branch1_scale@GRAD'], X@GRAD=['res4a_branch1.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4a_branch1_offset'], ReserveSpace=['bn4a_branch1.output.1.tmp_2'], SavedMean=['bn4a_branch1.output.1.tmp_0'], SavedVariance=['bn4a_branch1.output.1.tmp_1'], Scale=['bn4a_branch1_scale'], X=['res4a_branch1.conv2d.output.1.tmp_0'], Y@GRAD=['bn4a_branch1.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4a_branch1_offset', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale', 'bn4a_branch1_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4a_branch1_weights@GRAD'], Input@GRAD=['res3d.add.output.5.tmp_1@GRAD@RENAME@block0@0']} = conv2d_grad(inputs={Bias=[], Filter=['res4a_branch1_weights'], Input=['res3d.add.output.5.tmp_1'], Output@GRAD=['res4a_branch1.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4a_branch1_weights', 'res4a_branch1_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Bias@GRAD=['bn4a_branch2c_offset@GRAD'], Scale@GRAD=['bn4a_branch2c_scale@GRAD'], X@GRAD=['res4a_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4a_branch2c_offset'], ReserveSpace=['bn4a_branch2c.output.1.tmp_2'], SavedMean=['bn4a_branch2c.output.1.tmp_0'], SavedVariance=['bn4a_branch2c.output.1.tmp_1'], Scale=['bn4a_branch2c_scale'], X=['res4a_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn4a_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4a_branch2c_offset', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale', 'bn4a_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4a_branch2c_weights@GRAD'], Input@GRAD=['bn4a_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4a_branch2c_weights'], Input=['bn4a_branch2b.output.1.tmp_4'], Output@GRAD=['res4a_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4a_branch2c_weights', 'res4a_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4a_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4a_branch2b.output.1.tmp_4'], Out@GRAD=['bn4a_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4a_branch2b_offset@GRAD'], Scale@GRAD=['bn4a_branch2b_scale@GRAD'], X@GRAD=['res4a_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4a_branch2b_offset'], ReserveSpace=['bn4a_branch2b.output.1.tmp_2'], SavedMean=['bn4a_branch2b.output.1.tmp_0'], SavedVariance=['bn4a_branch2b.output.1.tmp_1'], Scale=['bn4a_branch2b_scale'], X=['res4a_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn4a_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4a_branch2b_offset', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale', 'bn4a_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4a_branch2b_weights@GRAD'], Input@GRAD=['bn4a_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res4a_branch2b_weights'], Input=['bn4a_branch2a.output.1.tmp_4'], Output@GRAD=['res4a_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4a_branch2b_weights', 'res4a_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn4a_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn4a_branch2a.output.1.tmp_4'], Out@GRAD=['bn4a_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn4a_branch2a_offset@GRAD'], Scale@GRAD=['bn4a_branch2a_scale@GRAD'], X@GRAD=['res4a_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn4a_branch2a_offset'], ReserveSpace=['bn4a_branch2a.output.1.tmp_2'], SavedMean=['bn4a_branch2a.output.1.tmp_0'], SavedVariance=['bn4a_branch2a.output.1.tmp_1'], Scale=['bn4a_branch2a_scale'], X=['res4a_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn4a_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn4a_branch2a_offset', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale', 'bn4a_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res4a_branch2a_weights@GRAD'], Input@GRAD=['res3d.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res4a_branch2a_weights'], Input=['res3d.add.output.5.tmp_1'], Output@GRAD=['res4a_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res4a_branch2a_weights', 'res4a_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res3d.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res3d.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res3d.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res3d.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res3d.add.output.5.tmp_1'], Out@GRAD=['res3d.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res3c.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn3d_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res3d.add.output.5.tmp_0@GRAD'], X=['res3c.add.output.5.tmp_1'], Y=['bn3d_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn3d_branch2c_offset@GRAD'], Scale@GRAD=['bn3d_branch2c_scale@GRAD'], X@GRAD=['res3d_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3d_branch2c_offset'], ReserveSpace=['bn3d_branch2c.output.1.tmp_2'], SavedMean=['bn3d_branch2c.output.1.tmp_0'], SavedVariance=['bn3d_branch2c.output.1.tmp_1'], Scale=['bn3d_branch2c_scale'], X=['res3d_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn3d_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3d_branch2c_offset', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale', 'bn3d_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3d_branch2c_weights@GRAD'], Input@GRAD=['bn3d_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3d_branch2c_weights'], Input=['bn3d_branch2b.output.1.tmp_4'], Output@GRAD=['res3d_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3d_branch2c_weights', 'res3d_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3d_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3d_branch2b.output.1.tmp_4'], Out@GRAD=['bn3d_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3d_branch2b_offset@GRAD'], Scale@GRAD=['bn3d_branch2b_scale@GRAD'], X@GRAD=['res3d_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3d_branch2b_offset'], ReserveSpace=['bn3d_branch2b.output.1.tmp_2'], SavedMean=['bn3d_branch2b.output.1.tmp_0'], SavedVariance=['bn3d_branch2b.output.1.tmp_1'], Scale=['bn3d_branch2b_scale'], X=['res3d_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn3d_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3d_branch2b_offset', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale', 'bn3d_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3d_branch2b_weights@GRAD'], Input@GRAD=['bn3d_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3d_branch2b_weights'], Input=['bn3d_branch2a.output.1.tmp_4'], Output@GRAD=['res3d_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3d_branch2b_weights', 'res3d_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3d_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3d_branch2a.output.1.tmp_4'], Out@GRAD=['bn3d_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3d_branch2a_offset@GRAD'], Scale@GRAD=['bn3d_branch2a_scale@GRAD'], X@GRAD=['res3d_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3d_branch2a_offset'], ReserveSpace=['bn3d_branch2a.output.1.tmp_2'], SavedMean=['bn3d_branch2a.output.1.tmp_0'], SavedVariance=['bn3d_branch2a.output.1.tmp_1'], Scale=['bn3d_branch2a_scale'], X=['res3d_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn3d_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3d_branch2a_offset', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale', 'bn3d_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3d_branch2a_weights@GRAD'], Input@GRAD=['res3c.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res3d_branch2a_weights'], Input=['res3c.add.output.5.tmp_1'], Output@GRAD=['res3d_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3d_branch2a_weights', 'res3d_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res3c.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res3c.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res3c.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res3c.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res3c.add.output.5.tmp_1'], Out@GRAD=['res3c.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res3b.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn3c_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res3c.add.output.5.tmp_0@GRAD'], X=['res3b.add.output.5.tmp_1'], Y=['bn3c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn3c_branch2c_offset@GRAD'], Scale@GRAD=['bn3c_branch2c_scale@GRAD'], X@GRAD=['res3c_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3c_branch2c_offset'], ReserveSpace=['bn3c_branch2c.output.1.tmp_2'], SavedMean=['bn3c_branch2c.output.1.tmp_0'], SavedVariance=['bn3c_branch2c.output.1.tmp_1'], Scale=['bn3c_branch2c_scale'], X=['res3c_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn3c_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3c_branch2c_offset', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale', 'bn3c_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3c_branch2c_weights@GRAD'], Input@GRAD=['bn3c_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3c_branch2c_weights'], Input=['bn3c_branch2b.output.1.tmp_4'], Output@GRAD=['res3c_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3c_branch2c_weights', 'res3c_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3c_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3c_branch2b.output.1.tmp_4'], Out@GRAD=['bn3c_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3c_branch2b_offset@GRAD'], Scale@GRAD=['bn3c_branch2b_scale@GRAD'], X@GRAD=['res3c_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3c_branch2b_offset'], ReserveSpace=['bn3c_branch2b.output.1.tmp_2'], SavedMean=['bn3c_branch2b.output.1.tmp_0'], SavedVariance=['bn3c_branch2b.output.1.tmp_1'], Scale=['bn3c_branch2b_scale'], X=['res3c_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn3c_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3c_branch2b_offset', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale', 'bn3c_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3c_branch2b_weights@GRAD'], Input@GRAD=['bn3c_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3c_branch2b_weights'], Input=['bn3c_branch2a.output.1.tmp_4'], Output@GRAD=['res3c_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3c_branch2b_weights', 'res3c_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3c_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3c_branch2a.output.1.tmp_4'], Out@GRAD=['bn3c_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3c_branch2a_offset@GRAD'], Scale@GRAD=['bn3c_branch2a_scale@GRAD'], X@GRAD=['res3c_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3c_branch2a_offset'], ReserveSpace=['bn3c_branch2a.output.1.tmp_2'], SavedMean=['bn3c_branch2a.output.1.tmp_0'], SavedVariance=['bn3c_branch2a.output.1.tmp_1'], Scale=['bn3c_branch2a_scale'], X=['res3c_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn3c_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3c_branch2a_offset', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale', 'bn3c_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3c_branch2a_weights@GRAD'], Input@GRAD=['res3b.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res3c_branch2a_weights'], Input=['res3b.add.output.5.tmp_1'], Output@GRAD=['res3c_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3c_branch2a_weights', 'res3c_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res3b.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res3b.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res3b.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res3b.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res3b.add.output.5.tmp_1'], Out@GRAD=['res3b.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res3a.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn3b_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res3b.add.output.5.tmp_0@GRAD'], X=['res3a.add.output.5.tmp_1'], Y=['bn3b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn3b_branch2c_offset@GRAD'], Scale@GRAD=['bn3b_branch2c_scale@GRAD'], X@GRAD=['res3b_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3b_branch2c_offset'], ReserveSpace=['bn3b_branch2c.output.1.tmp_2'], SavedMean=['bn3b_branch2c.output.1.tmp_0'], SavedVariance=['bn3b_branch2c.output.1.tmp_1'], Scale=['bn3b_branch2c_scale'], X=['res3b_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn3b_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3b_branch2c_offset', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale', 'bn3b_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3b_branch2c_weights@GRAD'], Input@GRAD=['bn3b_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3b_branch2c_weights'], Input=['bn3b_branch2b.output.1.tmp_4'], Output@GRAD=['res3b_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3b_branch2c_weights', 'res3b_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3b_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3b_branch2b.output.1.tmp_4'], Out@GRAD=['bn3b_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3b_branch2b_offset@GRAD'], Scale@GRAD=['bn3b_branch2b_scale@GRAD'], X@GRAD=['res3b_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3b_branch2b_offset'], ReserveSpace=['bn3b_branch2b.output.1.tmp_2'], SavedMean=['bn3b_branch2b.output.1.tmp_0'], SavedVariance=['bn3b_branch2b.output.1.tmp_1'], Scale=['bn3b_branch2b_scale'], X=['res3b_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn3b_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3b_branch2b_offset', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale', 'bn3b_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3b_branch2b_weights@GRAD'], Input@GRAD=['bn3b_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3b_branch2b_weights'], Input=['bn3b_branch2a.output.1.tmp_4'], Output@GRAD=['res3b_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3b_branch2b_weights', 'res3b_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3b_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3b_branch2a.output.1.tmp_4'], Out@GRAD=['bn3b_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3b_branch2a_offset@GRAD'], Scale@GRAD=['bn3b_branch2a_scale@GRAD'], X@GRAD=['res3b_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3b_branch2a_offset'], ReserveSpace=['bn3b_branch2a.output.1.tmp_2'], SavedMean=['bn3b_branch2a.output.1.tmp_0'], SavedVariance=['bn3b_branch2a.output.1.tmp_1'], Scale=['bn3b_branch2a_scale'], X=['res3b_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn3b_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3b_branch2a_offset', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale', 'bn3b_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3b_branch2a_weights@GRAD'], Input@GRAD=['res3a.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res3b_branch2a_weights'], Input=['res3a.add.output.5.tmp_1'], Output@GRAD=['res3b_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3b_branch2a_weights', 'res3b_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res3a.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res3a.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res3a.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res3a.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res3a.add.output.5.tmp_1'], Out@GRAD=['res3a.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['bn3a_branch1.output.1.tmp_3@GRAD'], Y@GRAD=['bn3a_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res3a.add.output.5.tmp_0@GRAD'], X=['bn3a_branch1.output.1.tmp_3'], Y=['bn3a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn3a_branch1_offset@GRAD'], Scale@GRAD=['bn3a_branch1_scale@GRAD'], X@GRAD=['res3a_branch1.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3a_branch1_offset'], ReserveSpace=['bn3a_branch1.output.1.tmp_2'], SavedMean=['bn3a_branch1.output.1.tmp_0'], SavedVariance=['bn3a_branch1.output.1.tmp_1'], Scale=['bn3a_branch1_scale'], X=['res3a_branch1.conv2d.output.1.tmp_0'], Y@GRAD=['bn3a_branch1.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3a_branch1_offset', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale', 'bn3a_branch1_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3a_branch1_weights@GRAD'], Input@GRAD=['res2c.add.output.5.tmp_1@GRAD@RENAME@block0@0']} = conv2d_grad(inputs={Bias=[], Filter=['res3a_branch1_weights'], Input=['res2c.add.output.5.tmp_1'], Output@GRAD=['res3a_branch1.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3a_branch1_weights', 'res3a_branch1_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Bias@GRAD=['bn3a_branch2c_offset@GRAD'], Scale@GRAD=['bn3a_branch2c_scale@GRAD'], X@GRAD=['res3a_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3a_branch2c_offset'], ReserveSpace=['bn3a_branch2c.output.1.tmp_2'], SavedMean=['bn3a_branch2c.output.1.tmp_0'], SavedVariance=['bn3a_branch2c.output.1.tmp_1'], Scale=['bn3a_branch2c_scale'], X=['res3a_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn3a_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3a_branch2c_offset', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale', 'bn3a_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3a_branch2c_weights@GRAD'], Input@GRAD=['bn3a_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3a_branch2c_weights'], Input=['bn3a_branch2b.output.1.tmp_4'], Output@GRAD=['res3a_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3a_branch2c_weights', 'res3a_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3a_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3a_branch2b.output.1.tmp_4'], Out@GRAD=['bn3a_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3a_branch2b_offset@GRAD'], Scale@GRAD=['bn3a_branch2b_scale@GRAD'], X@GRAD=['res3a_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3a_branch2b_offset'], ReserveSpace=['bn3a_branch2b.output.1.tmp_2'], SavedMean=['bn3a_branch2b.output.1.tmp_0'], SavedVariance=['bn3a_branch2b.output.1.tmp_1'], Scale=['bn3a_branch2b_scale'], X=['res3a_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn3a_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3a_branch2b_offset', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale', 'bn3a_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3a_branch2b_weights@GRAD'], Input@GRAD=['bn3a_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res3a_branch2b_weights'], Input=['bn3a_branch2a.output.1.tmp_4'], Output@GRAD=['res3a_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3a_branch2b_weights', 'res3a_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn3a_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn3a_branch2a.output.1.tmp_4'], Out@GRAD=['bn3a_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn3a_branch2a_offset@GRAD'], Scale@GRAD=['bn3a_branch2a_scale@GRAD'], X@GRAD=['res3a_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn3a_branch2a_offset'], ReserveSpace=['bn3a_branch2a.output.1.tmp_2'], SavedMean=['bn3a_branch2a.output.1.tmp_0'], SavedVariance=['bn3a_branch2a.output.1.tmp_1'], Scale=['bn3a_branch2a_scale'], X=['res3a_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn3a_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn3a_branch2a_offset', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale', 'bn3a_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res3a_branch2a_weights@GRAD'], Input@GRAD=['res2c.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res3a_branch2a_weights'], Input=['res2c.add.output.5.tmp_1'], Output@GRAD=['res3a_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res3a_branch2a_weights', 'res3a_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res2c.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res2c.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res2c.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res2c.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res2c.add.output.5.tmp_1'], Out@GRAD=['res2c.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res2b.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn2c_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res2c.add.output.5.tmp_0@GRAD'], X=['res2b.add.output.5.tmp_1'], Y=['bn2c_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn2c_branch2c_offset@GRAD'], Scale@GRAD=['bn2c_branch2c_scale@GRAD'], X@GRAD=['res2c_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2c_branch2c_offset'], ReserveSpace=['bn2c_branch2c.output.1.tmp_2'], SavedMean=['bn2c_branch2c.output.1.tmp_0'], SavedVariance=['bn2c_branch2c.output.1.tmp_1'], Scale=['bn2c_branch2c_scale'], X=['res2c_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn2c_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2c_branch2c_offset', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale', 'bn2c_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2c_branch2c_weights@GRAD'], Input@GRAD=['bn2c_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res2c_branch2c_weights'], Input=['bn2c_branch2b.output.1.tmp_4'], Output@GRAD=['res2c_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2c_branch2c_weights', 'res2c_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn2c_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn2c_branch2b.output.1.tmp_4'], Out@GRAD=['bn2c_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn2c_branch2b_offset@GRAD'], Scale@GRAD=['bn2c_branch2b_scale@GRAD'], X@GRAD=['res2c_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2c_branch2b_offset'], ReserveSpace=['bn2c_branch2b.output.1.tmp_2'], SavedMean=['bn2c_branch2b.output.1.tmp_0'], SavedVariance=['bn2c_branch2b.output.1.tmp_1'], Scale=['bn2c_branch2b_scale'], X=['res2c_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn2c_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2c_branch2b_offset', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale', 'bn2c_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2c_branch2b_weights@GRAD'], Input@GRAD=['bn2c_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res2c_branch2b_weights'], Input=['bn2c_branch2a.output.1.tmp_4'], Output@GRAD=['res2c_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2c_branch2b_weights', 'res2c_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn2c_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn2c_branch2a.output.1.tmp_4'], Out@GRAD=['bn2c_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn2c_branch2a_offset@GRAD'], Scale@GRAD=['bn2c_branch2a_scale@GRAD'], X@GRAD=['res2c_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2c_branch2a_offset'], ReserveSpace=['bn2c_branch2a.output.1.tmp_2'], SavedMean=['bn2c_branch2a.output.1.tmp_0'], SavedVariance=['bn2c_branch2a.output.1.tmp_1'], Scale=['bn2c_branch2a_scale'], X=['res2c_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn2c_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2c_branch2a_offset', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale', 'bn2c_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2c_branch2a_weights@GRAD'], Input@GRAD=['res2b.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res2c_branch2a_weights'], Input=['res2b.add.output.5.tmp_1'], Output@GRAD=['res2c_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2c_branch2a_weights', 'res2c_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res2b.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res2b.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res2b.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res2b.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res2b.add.output.5.tmp_1'], Out@GRAD=['res2b.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['res2a.add.output.5.tmp_1@GRAD@RENAME@block0@0'], Y@GRAD=['bn2b_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res2b.add.output.5.tmp_0@GRAD'], X=['res2a.add.output.5.tmp_1'], Y=['bn2b_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn2b_branch2c_offset@GRAD'], Scale@GRAD=['bn2b_branch2c_scale@GRAD'], X@GRAD=['res2b_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2b_branch2c_offset'], ReserveSpace=['bn2b_branch2c.output.1.tmp_2'], SavedMean=['bn2b_branch2c.output.1.tmp_0'], SavedVariance=['bn2b_branch2c.output.1.tmp_1'], Scale=['bn2b_branch2c_scale'], X=['res2b_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn2b_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2b_branch2c_offset', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale', 'bn2b_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2b_branch2c_weights@GRAD'], Input@GRAD=['bn2b_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res2b_branch2c_weights'], Input=['bn2b_branch2b.output.1.tmp_4'], Output@GRAD=['res2b_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2b_branch2c_weights', 'res2b_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn2b_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn2b_branch2b.output.1.tmp_4'], Out@GRAD=['bn2b_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn2b_branch2b_offset@GRAD'], Scale@GRAD=['bn2b_branch2b_scale@GRAD'], X@GRAD=['res2b_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2b_branch2b_offset'], ReserveSpace=['bn2b_branch2b.output.1.tmp_2'], SavedMean=['bn2b_branch2b.output.1.tmp_0'], SavedVariance=['bn2b_branch2b.output.1.tmp_1'], Scale=['bn2b_branch2b_scale'], X=['res2b_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn2b_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2b_branch2b_offset', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale', 'bn2b_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2b_branch2b_weights@GRAD'], Input@GRAD=['bn2b_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res2b_branch2b_weights'], Input=['bn2b_branch2a.output.1.tmp_4'], Output@GRAD=['res2b_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2b_branch2b_weights', 'res2b_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn2b_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn2b_branch2a.output.1.tmp_4'], Out@GRAD=['bn2b_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn2b_branch2a_offset@GRAD'], Scale@GRAD=['bn2b_branch2a_scale@GRAD'], X@GRAD=['res2b_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2b_branch2a_offset'], ReserveSpace=['bn2b_branch2a.output.1.tmp_2'], SavedMean=['bn2b_branch2a.output.1.tmp_0'], SavedVariance=['bn2b_branch2a.output.1.tmp_1'], Scale=['bn2b_branch2a_scale'], X=['res2b_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn2b_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2b_branch2a_offset', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale', 'bn2b_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2b_branch2a_weights@GRAD'], Input@GRAD=['res2a.add.output.5.tmp_1@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res2b_branch2a_weights'], Input=['res2a.add.output.5.tmp_1'], Output@GRAD=['res2b_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2b_branch2a_weights', 'res2b_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res2a.add.output.5.tmp_1@GRAD']} = sum(inputs={X=['res2a.add.output.5.tmp_1@GRAD@RENAME@block0@0', 'res2a.add.output.5.tmp_1@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['res2a.add.output.5.tmp_0@GRAD']} = relu_grad(inputs={Out=['res2a.add.output.5.tmp_1'], Out@GRAD=['res2a.add.output.5.tmp_1@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {X@GRAD=['bn2a_branch1.output.1.tmp_3@GRAD'], Y@GRAD=['bn2a_branch2c.output.1.tmp_3@GRAD']} = elementwise_add_grad(inputs={Out@GRAD=['res2a.add.output.5.tmp_0@GRAD'], X=['bn2a_branch1.output.1.tmp_3'], Y=['bn2a_branch2c.output.1.tmp_3']}, Scale_out = 1.0, Scale_x = 1.0, Scale_y = 1.0, axis = -1, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_mkldnn = False, use_quantizer = False, with_quant_attr = False, x_data_format = , y_data_format = )
    {Bias@GRAD=['bn2a_branch1_offset@GRAD'], Scale@GRAD=['bn2a_branch1_scale@GRAD'], X@GRAD=['res2a_branch1.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2a_branch1_offset'], ReserveSpace=['bn2a_branch1.output.1.tmp_2'], SavedMean=['bn2a_branch1.output.1.tmp_0'], SavedVariance=['bn2a_branch1.output.1.tmp_1'], Scale=['bn2a_branch1_scale'], X=['res2a_branch1.conv2d.output.1.tmp_0'], Y@GRAD=['bn2a_branch1.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2a_branch1_offset', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale', 'bn2a_branch1_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2a_branch1_weights@GRAD'], Input@GRAD=['pool2d_0.tmp_0@GRAD@RENAME@block0@0']} = conv2d_grad(inputs={Bias=[], Filter=['res2a_branch1_weights'], Input=['pool2d_0.tmp_0'], Output@GRAD=['res2a_branch1.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2a_branch1_weights', 'res2a_branch1_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Bias@GRAD=['bn2a_branch2c_offset@GRAD'], Scale@GRAD=['bn2a_branch2c_scale@GRAD'], X@GRAD=['res2a_branch2c.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2a_branch2c_offset'], ReserveSpace=['bn2a_branch2c.output.1.tmp_2'], SavedMean=['bn2a_branch2c.output.1.tmp_0'], SavedVariance=['bn2a_branch2c.output.1.tmp_1'], Scale=['bn2a_branch2c_scale'], X=['res2a_branch2c.conv2d.output.1.tmp_0'], Y@GRAD=['bn2a_branch2c.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2a_branch2c_offset', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale', 'bn2a_branch2c_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2a_branch2c_weights@GRAD'], Input@GRAD=['bn2a_branch2b.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res2a_branch2c_weights'], Input=['bn2a_branch2b.output.1.tmp_4'], Output@GRAD=['res2a_branch2c.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2a_branch2c_weights', 'res2a_branch2c_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn2a_branch2b.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn2a_branch2b.output.1.tmp_4'], Out@GRAD=['bn2a_branch2b.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn2a_branch2b_offset@GRAD'], Scale@GRAD=['bn2a_branch2b_scale@GRAD'], X@GRAD=['res2a_branch2b.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2a_branch2b_offset'], ReserveSpace=['bn2a_branch2b.output.1.tmp_2'], SavedMean=['bn2a_branch2b.output.1.tmp_0'], SavedVariance=['bn2a_branch2b.output.1.tmp_1'], Scale=['bn2a_branch2b_scale'], X=['res2a_branch2b.conv2d.output.1.tmp_0'], Y@GRAD=['bn2a_branch2b.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2a_branch2b_offset', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale', 'bn2a_branch2b_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2a_branch2b_weights@GRAD'], Input@GRAD=['bn2a_branch2a.output.1.tmp_4@GRAD']} = conv2d_grad(inputs={Bias=[], Filter=['res2a_branch2b_weights'], Input=['bn2a_branch2a.output.1.tmp_4'], Output@GRAD=['res2a_branch2b.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2a_branch2b_weights', 'res2a_branch2b_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [1, 1], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {X@GRAD=['bn2a_branch2a.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn2a_branch2a.output.1.tmp_4'], Out@GRAD=['bn2a_branch2a.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn2a_branch2a_offset@GRAD'], Scale@GRAD=['bn2a_branch2a_scale@GRAD'], X@GRAD=['res2a_branch2a.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn2a_branch2a_offset'], ReserveSpace=['bn2a_branch2a.output.1.tmp_2'], SavedMean=['bn2a_branch2a.output.1.tmp_0'], SavedVariance=['bn2a_branch2a.output.1.tmp_1'], Scale=['bn2a_branch2a_scale'], X=['res2a_branch2a.conv2d.output.1.tmp_0'], Y@GRAD=['bn2a_branch2a.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn2a_branch2a_offset', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale', 'bn2a_branch2a_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['res2a_branch2a_weights@GRAD'], Input@GRAD=['pool2d_0.tmp_0@GRAD@RENAME@block0@1']} = conv2d_grad(inputs={Bias=[], Filter=['res2a_branch2a_weights'], Input=['pool2d_0.tmp_0'], Output@GRAD=['res2a_branch2a.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['res2a_branch2a_weights', 'res2a_branch2a_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['pool2d_0.tmp_0@GRAD']} = sum(inputs={X=['pool2d_0.tmp_0@GRAD@RENAME@block0@0', 'pool2d_0.tmp_0@GRAD@RENAME@block0@1']}, op_device = , op_role = 1, use_mkldnn = False)
    {X@GRAD=['bn_conv1.output.1.tmp_4@GRAD']} = pool2d_grad(inputs={Out=['pool2d_0.tmp_0'], Out@GRAD=['pool2d_0.tmp_0@GRAD'], X=['bn_conv1.output.1.tmp_4']}, adaptive = False, ceil_mode = False, data_format = NCHW, exclusive = True, global_pooling = False, is_test = False, ksize = [3, 3], mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [1, 1], pooling_type = max, strides = [2, 2], use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False)
    {X@GRAD=['bn_conv1.output.1.tmp_3@GRAD']} = relu_grad(inputs={Out=['bn_conv1.output.1.tmp_4'], Out@GRAD=['bn_conv1.output.1.tmp_4@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], use_cudnn = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=['bn_conv1_offset@GRAD'], Scale@GRAD=['bn_conv1_scale@GRAD'], X@GRAD=['conv1.conv2d.output.1.tmp_0@GRAD']} = batch_norm_grad(inputs={Bias=['bn_conv1_offset'], ReserveSpace=['bn_conv1.output.1.tmp_2'], SavedMean=['bn_conv1.output.1.tmp_0'], SavedVariance=['bn_conv1.output.1.tmp_1'], Scale=['bn_conv1_scale'], X=['conv1.conv2d.output.1.tmp_0'], Y@GRAD=['bn_conv1.output.1.tmp_3@GRAD']}, data_layout = NCHW, epsilon = 9.999999747378752e-06, fuse_with_relu = False, is_test = False, momentum = 0.8999999761581421, op_device = , op_namescope = /, op_role = 1, op_role_var = ['bn_conv1_offset', 'bn_conv1_offset@GRAD', 'bn_conv1_scale', 'bn_conv1_scale@GRAD'], trainable_statistics = False, use_global_stats = False, use_mkldnn = False, with_quant_attr = False)
    {Bias@GRAD=[], Filter@GRAD=['conv1_weights@GRAD'], Input@GRAD=[]} = conv2d_grad(inputs={Bias=[], Filter=['conv1_weights'], Input=['x'], Output@GRAD=['conv1.conv2d.output.1.tmp_0@GRAD']}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = False, mkldnn_data_type = float32, op_device = , op_namescope = /, op_role = 1, op_role_var = ['conv1_weights', 'conv1_weights@GRAD'], padding_algorithm = EXPLICIT, paddings = [3, 3], strides = [2, 2], use_addto = False, use_cudnn = True, use_mkldnn = False, use_quantizer = False, with_quant_attr = False, workspace_size_MB = 512)
    {Out=['res4f_branch2c_weights@GRAD']} = c_sync_calc_stream(inputs={X=['res4f_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], with_quant_attr = False)
    {Out=['bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale@GRAD', 'res5a_branch2a_weights@GRAD', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale@GRAD', 'res5a_branch2b_weights@GRAD', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale@GRAD', 'res5a_branch2c_weights@GRAD']} = c_sync_comm_stream(inputs={X=['bn4f_branch2c_offset@GRAD', 'bn4f_branch2c_scale@GRAD', 'res5a_branch2a_weights@GRAD', 'bn5a_branch2a_offset@GRAD', 'bn5a_branch2a_scale@GRAD', 'res5a_branch2b_weights@GRAD', 'bn5a_branch2b_offset@GRAD', 'bn5a_branch2b_scale@GRAD', 'res5a_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 2, with_quant_attr = False)
    {Out=['res4f_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res4f_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4f_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4f_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res4f_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4f_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4f_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4f_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4f_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res4f_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4e_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4e_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res4e_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4e_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4e_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res4e_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4e_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4e_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4e_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4e_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res4e_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4d_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4d_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res4d_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4d_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4d_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res4d_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4d_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4d_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4d_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4d_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res4d_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4c_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4c_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res4c_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4c_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4c_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res4c_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4c_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4c_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4c_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4c_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res4c_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4b_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4b_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res4b_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4b_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4b_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res4b_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4b_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4b_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4b_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4b_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res4b_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch1_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch1_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch1_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch1_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch1_weights@GRAD']} = c_reduce_sum(inputs={X=['res4a_branch1_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res4a_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res4a_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn4a_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn4a_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res4a_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res4a_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3d_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3d_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res3d_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3d_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3d_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res3d_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3d_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3d_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3d_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3d_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res3d_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3c_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3c_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res3c_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3c_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3c_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res3c_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3c_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3c_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3c_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3c_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res3c_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3b_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3b_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res3b_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3b_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3b_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res3b_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3b_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3b_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3b_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3b_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res3b_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch1_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch1_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch1_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch1_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch1_weights@GRAD']} = c_reduce_sum(inputs={X=['res3a_branch1_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res3a_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res3a_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn3a_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn3a_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res3a_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res3a_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2c_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2c_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res2c_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2c_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2c_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res2c_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2c_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2c_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2c_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2c_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res2c_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2b_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2b_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res2b_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2b_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2b_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res2b_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2b_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2b_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2b_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2b_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res2b_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch1_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch1_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch1_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch1_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch1_weights@GRAD']} = c_reduce_sum(inputs={X=['res2a_branch1_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2c_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch2c_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2c_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch2c_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2c_weights@GRAD']} = c_reduce_sum(inputs={X=['res2a_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2b_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch2b_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2b_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch2b_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2b_weights@GRAD']} = c_reduce_sum(inputs={X=['res2a_branch2b_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2a_scale@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch2a_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn2a_branch2a_offset@GRAD']} = c_reduce_sum(inputs={X=['bn2a_branch2a_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['res2a_branch2a_weights@GRAD']} = c_reduce_sum(inputs={X=['res2a_branch2a_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn_conv1_scale@GRAD']} = c_reduce_sum(inputs={X=['bn_conv1_scale@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['bn_conv1_offset@GRAD']} = c_reduce_sum(inputs={X=['bn_conv1_offset@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['conv1_weights@GRAD']} = c_reduce_sum(inputs={X=['conv1_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, root_id = 0, use_calc_stream = False, with_quant_attr = False)
    {Out=['conv1_weights@GRAD', 'bn_conv1_offset@GRAD', 'bn_conv1_scale@GRAD', 'res2a_branch2a_weights@GRAD', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale@GRAD', 'res2a_branch2b_weights@GRAD', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale@GRAD', 'res2a_branch2c_weights@GRAD', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale@GRAD', 'res2a_branch1_weights@GRAD', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale@GRAD', 'res2b_branch2a_weights@GRAD', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale@GRAD', 'res2b_branch2b_weights@GRAD', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale@GRAD', 'res2b_branch2c_weights@GRAD', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale@GRAD', 'res2c_branch2a_weights@GRAD', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale@GRAD', 'res2c_branch2b_weights@GRAD', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale@GRAD', 'res2c_branch2c_weights@GRAD', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale@GRAD', 'res3a_branch2a_weights@GRAD', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale@GRAD', 'res3a_branch2b_weights@GRAD', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale@GRAD', 'res3a_branch2c_weights@GRAD', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale@GRAD', 'res3a_branch1_weights@GRAD', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale@GRAD', 'res3b_branch2a_weights@GRAD', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale@GRAD', 'res3b_branch2b_weights@GRAD', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale@GRAD', 'res3b_branch2c_weights@GRAD', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale@GRAD', 'res3c_branch2a_weights@GRAD', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale@GRAD', 'res3c_branch2b_weights@GRAD', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale@GRAD', 'res3c_branch2c_weights@GRAD', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale@GRAD', 'res3d_branch2a_weights@GRAD', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale@GRAD', 'res3d_branch2b_weights@GRAD', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale@GRAD', 'res3d_branch2c_weights@GRAD', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale@GRAD', 'res4a_branch2a_weights@GRAD', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale@GRAD', 'res4a_branch2b_weights@GRAD', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale@GRAD', 'res4a_branch2c_weights@GRAD', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale@GRAD', 'res4a_branch1_weights@GRAD', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale@GRAD', 'res4b_branch2a_weights@GRAD', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale@GRAD', 'res4b_branch2b_weights@GRAD', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale@GRAD', 'res4b_branch2c_weights@GRAD', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale@GRAD', 'res4c_branch2a_weights@GRAD', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale@GRAD', 'res4c_branch2b_weights@GRAD', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale@GRAD', 'res4c_branch2c_weights@GRAD', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale@GRAD', 'res4d_branch2a_weights@GRAD', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale@GRAD', 'res4d_branch2b_weights@GRAD', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale@GRAD', 'res4d_branch2c_weights@GRAD', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale@GRAD', 'res4e_branch2a_weights@GRAD', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale@GRAD', 'res4e_branch2b_weights@GRAD', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale@GRAD', 'res4e_branch2c_weights@GRAD', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale@GRAD', 'res4f_branch2a_weights@GRAD', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale@GRAD', 'res4f_branch2b_weights@GRAD', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale@GRAD', 'res4f_branch2c_weights@GRAD']} = c_sync_comm_stream(inputs={X=['conv1_weights@GRAD', 'bn_conv1_offset@GRAD', 'bn_conv1_scale@GRAD', 'res2a_branch2a_weights@GRAD', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale@GRAD', 'res2a_branch2b_weights@GRAD', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale@GRAD', 'res2a_branch2c_weights@GRAD', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale@GRAD', 'res2a_branch1_weights@GRAD', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale@GRAD', 'res2b_branch2a_weights@GRAD', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale@GRAD', 'res2b_branch2b_weights@GRAD', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale@GRAD', 'res2b_branch2c_weights@GRAD', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale@GRAD', 'res2c_branch2a_weights@GRAD', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale@GRAD', 'res2c_branch2b_weights@GRAD', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale@GRAD', 'res2c_branch2c_weights@GRAD', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale@GRAD', 'res3a_branch2a_weights@GRAD', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale@GRAD', 'res3a_branch2b_weights@GRAD', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale@GRAD', 'res3a_branch2c_weights@GRAD', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale@GRAD', 'res3a_branch1_weights@GRAD', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale@GRAD', 'res3b_branch2a_weights@GRAD', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale@GRAD', 'res3b_branch2b_weights@GRAD', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale@GRAD', 'res3b_branch2c_weights@GRAD', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale@GRAD', 'res3c_branch2a_weights@GRAD', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale@GRAD', 'res3c_branch2b_weights@GRAD', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale@GRAD', 'res3c_branch2c_weights@GRAD', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale@GRAD', 'res3d_branch2a_weights@GRAD', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale@GRAD', 'res3d_branch2b_weights@GRAD', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale@GRAD', 'res3d_branch2c_weights@GRAD', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale@GRAD', 'res4a_branch2a_weights@GRAD', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale@GRAD', 'res4a_branch2b_weights@GRAD', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale@GRAD', 'res4a_branch2c_weights@GRAD', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale@GRAD', 'res4a_branch1_weights@GRAD', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale@GRAD', 'res4b_branch2a_weights@GRAD', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale@GRAD', 'res4b_branch2b_weights@GRAD', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale@GRAD', 'res4b_branch2c_weights@GRAD', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale@GRAD', 'res4c_branch2a_weights@GRAD', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale@GRAD', 'res4c_branch2b_weights@GRAD', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale@GRAD', 'res4c_branch2c_weights@GRAD', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale@GRAD', 'res4d_branch2a_weights@GRAD', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale@GRAD', 'res4d_branch2b_weights@GRAD', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale@GRAD', 'res4d_branch2c_weights@GRAD', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale@GRAD', 'res4e_branch2a_weights@GRAD', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale@GRAD', 'res4e_branch2b_weights@GRAD', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale@GRAD', 'res4e_branch2c_weights@GRAD', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale@GRAD', 'res4f_branch2a_weights@GRAD', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale@GRAD', 'res4f_branch2b_weights@GRAD', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale@GRAD', 'res4f_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 1, with_quant_attr = False)
    {FusedOutput=['FusedGrad_conv1_weights@GRAD_0'], Output=['conv1_weights@GRAD', 'bn_conv1_offset@GRAD', 'bn_conv1_scale@GRAD', 'res2a_branch2a_weights@GRAD', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale@GRAD', 'res2a_branch2b_weights@GRAD', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale@GRAD', 'res2a_branch2c_weights@GRAD', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale@GRAD', 'res2a_branch1_weights@GRAD', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale@GRAD', 'res2b_branch2a_weights@GRAD', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale@GRAD', 'res2b_branch2b_weights@GRAD', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale@GRAD', 'res2b_branch2c_weights@GRAD', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale@GRAD', 'res2c_branch2a_weights@GRAD', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale@GRAD', 'res2c_branch2b_weights@GRAD', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale@GRAD', 'res2c_branch2c_weights@GRAD', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale@GRAD', 'res3a_branch2a_weights@GRAD', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale@GRAD', 'res3a_branch2b_weights@GRAD', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale@GRAD', 'res3a_branch2c_weights@GRAD', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale@GRAD', 'res3a_branch1_weights@GRAD', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale@GRAD', 'res3b_branch2a_weights@GRAD', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale@GRAD', 'res3b_branch2b_weights@GRAD', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale@GRAD', 'res3b_branch2c_weights@GRAD', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale@GRAD', 'res3c_branch2a_weights@GRAD', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale@GRAD', 'res3c_branch2b_weights@GRAD', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale@GRAD', 'res3c_branch2c_weights@GRAD', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale@GRAD', 'res3d_branch2a_weights@GRAD', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale@GRAD', 'res3d_branch2b_weights@GRAD', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale@GRAD', 'res3d_branch2c_weights@GRAD', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale@GRAD', 'res4a_branch2a_weights@GRAD', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale@GRAD', 'res4a_branch2b_weights@GRAD', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale@GRAD', 'res4a_branch2c_weights@GRAD', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale@GRAD', 'res4a_branch1_weights@GRAD', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale@GRAD', 'res4b_branch2a_weights@GRAD', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale@GRAD', 'res4b_branch2b_weights@GRAD', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale@GRAD', 'res4b_branch2c_weights@GRAD', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale@GRAD', 'res4c_branch2a_weights@GRAD', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale@GRAD', 'res4c_branch2b_weights@GRAD', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale@GRAD', 'res4c_branch2c_weights@GRAD', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale@GRAD', 'res4d_branch2a_weights@GRAD', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale@GRAD', 'res4d_branch2b_weights@GRAD', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale@GRAD', 'res4d_branch2c_weights@GRAD', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale@GRAD', 'res4e_branch2a_weights@GRAD', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale@GRAD', 'res4e_branch2b_weights@GRAD', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale@GRAD', 'res4e_branch2c_weights@GRAD', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale@GRAD', 'res4f_branch2a_weights@GRAD', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale@GRAD', 'res4f_branch2b_weights@GRAD', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale@GRAD']} = coalesce_tensor(inputs={Input=['conv1_weights@GRAD', 'bn_conv1_offset@GRAD', 'bn_conv1_scale@GRAD', 'res2a_branch2a_weights@GRAD', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale@GRAD', 'res2a_branch2b_weights@GRAD', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale@GRAD', 'res2a_branch2c_weights@GRAD', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale@GRAD', 'res2a_branch1_weights@GRAD', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale@GRAD', 'res2b_branch2a_weights@GRAD', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale@GRAD', 'res2b_branch2b_weights@GRAD', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale@GRAD', 'res2b_branch2c_weights@GRAD', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale@GRAD', 'res2c_branch2a_weights@GRAD', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale@GRAD', 'res2c_branch2b_weights@GRAD', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale@GRAD', 'res2c_branch2c_weights@GRAD', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale@GRAD', 'res3a_branch2a_weights@GRAD', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale@GRAD', 'res3a_branch2b_weights@GRAD', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale@GRAD', 'res3a_branch2c_weights@GRAD', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale@GRAD', 'res3a_branch1_weights@GRAD', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale@GRAD', 'res3b_branch2a_weights@GRAD', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale@GRAD', 'res3b_branch2b_weights@GRAD', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale@GRAD', 'res3b_branch2c_weights@GRAD', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale@GRAD', 'res3c_branch2a_weights@GRAD', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale@GRAD', 'res3c_branch2b_weights@GRAD', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale@GRAD', 'res3c_branch2c_weights@GRAD', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale@GRAD', 'res3d_branch2a_weights@GRAD', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale@GRAD', 'res3d_branch2b_weights@GRAD', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale@GRAD', 'res3d_branch2c_weights@GRAD', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale@GRAD', 'res4a_branch2a_weights@GRAD', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale@GRAD', 'res4a_branch2b_weights@GRAD', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale@GRAD', 'res4a_branch2c_weights@GRAD', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale@GRAD', 'res4a_branch1_weights@GRAD', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale@GRAD', 'res4b_branch2a_weights@GRAD', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale@GRAD', 'res4b_branch2b_weights@GRAD', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale@GRAD', 'res4b_branch2c_weights@GRAD', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale@GRAD', 'res4c_branch2a_weights@GRAD', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale@GRAD', 'res4c_branch2b_weights@GRAD', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale@GRAD', 'res4c_branch2c_weights@GRAD', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale@GRAD', 'res4d_branch2a_weights@GRAD', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale@GRAD', 'res4d_branch2b_weights@GRAD', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale@GRAD', 'res4d_branch2c_weights@GRAD', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale@GRAD', 'res4e_branch2a_weights@GRAD', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale@GRAD', 'res4e_branch2b_weights@GRAD', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale@GRAD', 'res4e_branch2c_weights@GRAD', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale@GRAD', 'res4f_branch2a_weights@GRAD', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale@GRAD', 'res4f_branch2b_weights@GRAD', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale@GRAD']}, align_size = -1, check_name = False, constant = 0.0, copy_data = True, dtype = 5, op_device = , op_namescope = /, op_role = 1, op_role_var = [], persist_output = False, set_constant = False, use_align = True, user_defined_size_of_dtype = -1, with_quant_attr = False)
    {Out=['res4f_branch2c_weights@GRAD']} = c_sync_calc_stream(inputs={X=['res4f_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], with_quant_attr = False)
    {Out=['res4f_branch2c_weights@GRAD']} = c_allreduce_sum(inputs={X=['res4f_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 2, use_calc_stream = False, use_model_parallel = False, with_quant_attr = False)
    {Out=['FusedGrad_conv1_weights@GRAD_0']} = c_sync_calc_stream(inputs={X=['FusedGrad_conv1_weights@GRAD_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], with_quant_attr = False)
    {Out=['FusedGrad_conv1_weights@GRAD_0']} = c_allreduce_sum(inputs={X=['FusedGrad_conv1_weights@GRAD_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 2, use_calc_stream = False, use_model_parallel = False, with_quant_attr = False)
    {Out=['conv1_weights@GRAD', 'bn_conv1_offset@GRAD', 'bn_conv1_scale@GRAD', 'res2a_branch2a_weights@GRAD', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale@GRAD', 'res2a_branch2b_weights@GRAD', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale@GRAD', 'res2a_branch2c_weights@GRAD', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale@GRAD', 'res2a_branch1_weights@GRAD', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale@GRAD', 'res2b_branch2a_weights@GRAD', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale@GRAD', 'res2b_branch2b_weights@GRAD', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale@GRAD', 'res2b_branch2c_weights@GRAD', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale@GRAD', 'res2c_branch2a_weights@GRAD', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale@GRAD', 'res2c_branch2b_weights@GRAD', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale@GRAD', 'res2c_branch2c_weights@GRAD', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale@GRAD', 'res3a_branch2a_weights@GRAD', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale@GRAD', 'res3a_branch2b_weights@GRAD', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale@GRAD', 'res3a_branch2c_weights@GRAD', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale@GRAD', 'res3a_branch1_weights@GRAD', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale@GRAD', 'res3b_branch2a_weights@GRAD', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale@GRAD', 'res3b_branch2b_weights@GRAD', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale@GRAD', 'res3b_branch2c_weights@GRAD', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale@GRAD', 'res3c_branch2a_weights@GRAD', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale@GRAD', 'res3c_branch2b_weights@GRAD', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale@GRAD', 'res3c_branch2c_weights@GRAD', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale@GRAD', 'res3d_branch2a_weights@GRAD', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale@GRAD', 'res3d_branch2b_weights@GRAD', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale@GRAD', 'res3d_branch2c_weights@GRAD', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale@GRAD', 'res4a_branch2a_weights@GRAD', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale@GRAD', 'res4a_branch2b_weights@GRAD', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale@GRAD', 'res4a_branch2c_weights@GRAD', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale@GRAD', 'res4a_branch1_weights@GRAD', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale@GRAD', 'res4b_branch2a_weights@GRAD', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale@GRAD', 'res4b_branch2b_weights@GRAD', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale@GRAD', 'res4b_branch2c_weights@GRAD', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale@GRAD', 'res4c_branch2a_weights@GRAD', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale@GRAD', 'res4c_branch2b_weights@GRAD', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale@GRAD', 'res4c_branch2c_weights@GRAD', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale@GRAD', 'res4d_branch2a_weights@GRAD', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale@GRAD', 'res4d_branch2b_weights@GRAD', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale@GRAD', 'res4d_branch2c_weights@GRAD', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale@GRAD', 'res4e_branch2a_weights@GRAD', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale@GRAD', 'res4e_branch2b_weights@GRAD', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale@GRAD', 'res4e_branch2c_weights@GRAD', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale@GRAD', 'res4f_branch2a_weights@GRAD', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale@GRAD', 'res4f_branch2b_weights@GRAD', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale@GRAD', 'res4f_branch2c_weights@GRAD']} = c_sync_comm_stream(inputs={X=['conv1_weights@GRAD', 'bn_conv1_offset@GRAD', 'bn_conv1_scale@GRAD', 'res2a_branch2a_weights@GRAD', 'bn2a_branch2a_offset@GRAD', 'bn2a_branch2a_scale@GRAD', 'res2a_branch2b_weights@GRAD', 'bn2a_branch2b_offset@GRAD', 'bn2a_branch2b_scale@GRAD', 'res2a_branch2c_weights@GRAD', 'bn2a_branch2c_offset@GRAD', 'bn2a_branch2c_scale@GRAD', 'res2a_branch1_weights@GRAD', 'bn2a_branch1_offset@GRAD', 'bn2a_branch1_scale@GRAD', 'res2b_branch2a_weights@GRAD', 'bn2b_branch2a_offset@GRAD', 'bn2b_branch2a_scale@GRAD', 'res2b_branch2b_weights@GRAD', 'bn2b_branch2b_offset@GRAD', 'bn2b_branch2b_scale@GRAD', 'res2b_branch2c_weights@GRAD', 'bn2b_branch2c_offset@GRAD', 'bn2b_branch2c_scale@GRAD', 'res2c_branch2a_weights@GRAD', 'bn2c_branch2a_offset@GRAD', 'bn2c_branch2a_scale@GRAD', 'res2c_branch2b_weights@GRAD', 'bn2c_branch2b_offset@GRAD', 'bn2c_branch2b_scale@GRAD', 'res2c_branch2c_weights@GRAD', 'bn2c_branch2c_offset@GRAD', 'bn2c_branch2c_scale@GRAD', 'res3a_branch2a_weights@GRAD', 'bn3a_branch2a_offset@GRAD', 'bn3a_branch2a_scale@GRAD', 'res3a_branch2b_weights@GRAD', 'bn3a_branch2b_offset@GRAD', 'bn3a_branch2b_scale@GRAD', 'res3a_branch2c_weights@GRAD', 'bn3a_branch2c_offset@GRAD', 'bn3a_branch2c_scale@GRAD', 'res3a_branch1_weights@GRAD', 'bn3a_branch1_offset@GRAD', 'bn3a_branch1_scale@GRAD', 'res3b_branch2a_weights@GRAD', 'bn3b_branch2a_offset@GRAD', 'bn3b_branch2a_scale@GRAD', 'res3b_branch2b_weights@GRAD', 'bn3b_branch2b_offset@GRAD', 'bn3b_branch2b_scale@GRAD', 'res3b_branch2c_weights@GRAD', 'bn3b_branch2c_offset@GRAD', 'bn3b_branch2c_scale@GRAD', 'res3c_branch2a_weights@GRAD', 'bn3c_branch2a_offset@GRAD', 'bn3c_branch2a_scale@GRAD', 'res3c_branch2b_weights@GRAD', 'bn3c_branch2b_offset@GRAD', 'bn3c_branch2b_scale@GRAD', 'res3c_branch2c_weights@GRAD', 'bn3c_branch2c_offset@GRAD', 'bn3c_branch2c_scale@GRAD', 'res3d_branch2a_weights@GRAD', 'bn3d_branch2a_offset@GRAD', 'bn3d_branch2a_scale@GRAD', 'res3d_branch2b_weights@GRAD', 'bn3d_branch2b_offset@GRAD', 'bn3d_branch2b_scale@GRAD', 'res3d_branch2c_weights@GRAD', 'bn3d_branch2c_offset@GRAD', 'bn3d_branch2c_scale@GRAD', 'res4a_branch2a_weights@GRAD', 'bn4a_branch2a_offset@GRAD', 'bn4a_branch2a_scale@GRAD', 'res4a_branch2b_weights@GRAD', 'bn4a_branch2b_offset@GRAD', 'bn4a_branch2b_scale@GRAD', 'res4a_branch2c_weights@GRAD', 'bn4a_branch2c_offset@GRAD', 'bn4a_branch2c_scale@GRAD', 'res4a_branch1_weights@GRAD', 'bn4a_branch1_offset@GRAD', 'bn4a_branch1_scale@GRAD', 'res4b_branch2a_weights@GRAD', 'bn4b_branch2a_offset@GRAD', 'bn4b_branch2a_scale@GRAD', 'res4b_branch2b_weights@GRAD', 'bn4b_branch2b_offset@GRAD', 'bn4b_branch2b_scale@GRAD', 'res4b_branch2c_weights@GRAD', 'bn4b_branch2c_offset@GRAD', 'bn4b_branch2c_scale@GRAD', 'res4c_branch2a_weights@GRAD', 'bn4c_branch2a_offset@GRAD', 'bn4c_branch2a_scale@GRAD', 'res4c_branch2b_weights@GRAD', 'bn4c_branch2b_offset@GRAD', 'bn4c_branch2b_scale@GRAD', 'res4c_branch2c_weights@GRAD', 'bn4c_branch2c_offset@GRAD', 'bn4c_branch2c_scale@GRAD', 'res4d_branch2a_weights@GRAD', 'bn4d_branch2a_offset@GRAD', 'bn4d_branch2a_scale@GRAD', 'res4d_branch2b_weights@GRAD', 'bn4d_branch2b_offset@GRAD', 'bn4d_branch2b_scale@GRAD', 'res4d_branch2c_weights@GRAD', 'bn4d_branch2c_offset@GRAD', 'bn4d_branch2c_scale@GRAD', 'res4e_branch2a_weights@GRAD', 'bn4e_branch2a_offset@GRAD', 'bn4e_branch2a_scale@GRAD', 'res4e_branch2b_weights@GRAD', 'bn4e_branch2b_offset@GRAD', 'bn4e_branch2b_scale@GRAD', 'res4e_branch2c_weights@GRAD', 'bn4e_branch2c_offset@GRAD', 'bn4e_branch2c_scale@GRAD', 'res4f_branch2a_weights@GRAD', 'bn4f_branch2a_offset@GRAD', 'bn4f_branch2a_scale@GRAD', 'res4f_branch2b_weights@GRAD', 'bn4f_branch2b_offset@GRAD', 'bn4f_branch2b_scale@GRAD', 'res4f_branch2c_weights@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [], ring_id = 2, with_quant_attr = False)
    {ParamOut=['bn2a_branch1_offset'], VelocityOut=['bn2a_branch1_offset_velocity_0']} = momentum(inputs={Grad=['bn2a_branch1_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch1_offset'], Velocity=['bn2a_branch1_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer/, op_role = 2, op_role_var = ['bn2a_branch1_offset', 'bn2a_branch1_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch1_scale'], VelocityOut=['bn2a_branch1_scale_velocity_0']} = momentum(inputs={Grad=['bn2a_branch1_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch1_scale'], Velocity=['bn2a_branch1_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_1/, op_role = 2, op_role_var = ['bn2a_branch1_scale', 'bn2a_branch1_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch2a_offset'], VelocityOut=['bn2a_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn2a_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch2a_offset'], Velocity=['bn2a_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_2/, op_role = 2, op_role_var = ['bn2a_branch2a_offset', 'bn2a_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch2a_scale'], VelocityOut=['bn2a_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn2a_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch2a_scale'], Velocity=['bn2a_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_3/, op_role = 2, op_role_var = ['bn2a_branch2a_scale', 'bn2a_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch2b_offset'], VelocityOut=['bn2a_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn2a_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch2b_offset'], Velocity=['bn2a_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_4/, op_role = 2, op_role_var = ['bn2a_branch2b_offset', 'bn2a_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch2b_scale'], VelocityOut=['bn2a_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn2a_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch2b_scale'], Velocity=['bn2a_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_5/, op_role = 2, op_role_var = ['bn2a_branch2b_scale', 'bn2a_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch2c_offset'], VelocityOut=['bn2a_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn2a_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch2c_offset'], Velocity=['bn2a_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_6/, op_role = 2, op_role_var = ['bn2a_branch2c_offset', 'bn2a_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2a_branch2c_scale'], VelocityOut=['bn2a_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn2a_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2a_branch2c_scale'], Velocity=['bn2a_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_7/, op_role = 2, op_role_var = ['bn2a_branch2c_scale', 'bn2a_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2b_branch2a_offset'], VelocityOut=['bn2b_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn2b_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2b_branch2a_offset'], Velocity=['bn2b_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_8/, op_role = 2, op_role_var = ['bn2b_branch2a_offset', 'bn2b_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2b_branch2a_scale'], VelocityOut=['bn2b_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn2b_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2b_branch2a_scale'], Velocity=['bn2b_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_9/, op_role = 2, op_role_var = ['bn2b_branch2a_scale', 'bn2b_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2b_branch2b_offset'], VelocityOut=['bn2b_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn2b_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2b_branch2b_offset'], Velocity=['bn2b_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_10/, op_role = 2, op_role_var = ['bn2b_branch2b_offset', 'bn2b_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2b_branch2b_scale'], VelocityOut=['bn2b_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn2b_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2b_branch2b_scale'], Velocity=['bn2b_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_11/, op_role = 2, op_role_var = ['bn2b_branch2b_scale', 'bn2b_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2b_branch2c_offset'], VelocityOut=['bn2b_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn2b_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2b_branch2c_offset'], Velocity=['bn2b_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_12/, op_role = 2, op_role_var = ['bn2b_branch2c_offset', 'bn2b_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2b_branch2c_scale'], VelocityOut=['bn2b_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn2b_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2b_branch2c_scale'], Velocity=['bn2b_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_13/, op_role = 2, op_role_var = ['bn2b_branch2c_scale', 'bn2b_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2c_branch2a_offset'], VelocityOut=['bn2c_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn2c_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2c_branch2a_offset'], Velocity=['bn2c_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_14/, op_role = 2, op_role_var = ['bn2c_branch2a_offset', 'bn2c_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2c_branch2a_scale'], VelocityOut=['bn2c_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn2c_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2c_branch2a_scale'], Velocity=['bn2c_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_15/, op_role = 2, op_role_var = ['bn2c_branch2a_scale', 'bn2c_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2c_branch2b_offset'], VelocityOut=['bn2c_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn2c_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2c_branch2b_offset'], Velocity=['bn2c_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_16/, op_role = 2, op_role_var = ['bn2c_branch2b_offset', 'bn2c_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2c_branch2b_scale'], VelocityOut=['bn2c_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn2c_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2c_branch2b_scale'], Velocity=['bn2c_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_17/, op_role = 2, op_role_var = ['bn2c_branch2b_scale', 'bn2c_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2c_branch2c_offset'], VelocityOut=['bn2c_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn2c_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2c_branch2c_offset'], Velocity=['bn2c_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_18/, op_role = 2, op_role_var = ['bn2c_branch2c_offset', 'bn2c_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn2c_branch2c_scale'], VelocityOut=['bn2c_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn2c_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn2c_branch2c_scale'], Velocity=['bn2c_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_19/, op_role = 2, op_role_var = ['bn2c_branch2c_scale', 'bn2c_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch1_offset'], VelocityOut=['bn3a_branch1_offset_velocity_0']} = momentum(inputs={Grad=['bn3a_branch1_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch1_offset'], Velocity=['bn3a_branch1_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_20/, op_role = 2, op_role_var = ['bn3a_branch1_offset', 'bn3a_branch1_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch1_scale'], VelocityOut=['bn3a_branch1_scale_velocity_0']} = momentum(inputs={Grad=['bn3a_branch1_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch1_scale'], Velocity=['bn3a_branch1_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_21/, op_role = 2, op_role_var = ['bn3a_branch1_scale', 'bn3a_branch1_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch2a_offset'], VelocityOut=['bn3a_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn3a_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch2a_offset'], Velocity=['bn3a_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_22/, op_role = 2, op_role_var = ['bn3a_branch2a_offset', 'bn3a_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch2a_scale'], VelocityOut=['bn3a_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn3a_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch2a_scale'], Velocity=['bn3a_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_23/, op_role = 2, op_role_var = ['bn3a_branch2a_scale', 'bn3a_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch2b_offset'], VelocityOut=['bn3a_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn3a_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch2b_offset'], Velocity=['bn3a_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_24/, op_role = 2, op_role_var = ['bn3a_branch2b_offset', 'bn3a_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch2b_scale'], VelocityOut=['bn3a_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn3a_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch2b_scale'], Velocity=['bn3a_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_25/, op_role = 2, op_role_var = ['bn3a_branch2b_scale', 'bn3a_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch2c_offset'], VelocityOut=['bn3a_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn3a_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch2c_offset'], Velocity=['bn3a_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_26/, op_role = 2, op_role_var = ['bn3a_branch2c_offset', 'bn3a_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3a_branch2c_scale'], VelocityOut=['bn3a_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn3a_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3a_branch2c_scale'], Velocity=['bn3a_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_27/, op_role = 2, op_role_var = ['bn3a_branch2c_scale', 'bn3a_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3b_branch2a_offset'], VelocityOut=['bn3b_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn3b_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3b_branch2a_offset'], Velocity=['bn3b_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_28/, op_role = 2, op_role_var = ['bn3b_branch2a_offset', 'bn3b_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3b_branch2a_scale'], VelocityOut=['bn3b_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn3b_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3b_branch2a_scale'], Velocity=['bn3b_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_29/, op_role = 2, op_role_var = ['bn3b_branch2a_scale', 'bn3b_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3b_branch2b_offset'], VelocityOut=['bn3b_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn3b_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3b_branch2b_offset'], Velocity=['bn3b_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_30/, op_role = 2, op_role_var = ['bn3b_branch2b_offset', 'bn3b_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3b_branch2b_scale'], VelocityOut=['bn3b_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn3b_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3b_branch2b_scale'], Velocity=['bn3b_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_31/, op_role = 2, op_role_var = ['bn3b_branch2b_scale', 'bn3b_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3b_branch2c_offset'], VelocityOut=['bn3b_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn3b_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3b_branch2c_offset'], Velocity=['bn3b_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_32/, op_role = 2, op_role_var = ['bn3b_branch2c_offset', 'bn3b_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3b_branch2c_scale'], VelocityOut=['bn3b_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn3b_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3b_branch2c_scale'], Velocity=['bn3b_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_33/, op_role = 2, op_role_var = ['bn3b_branch2c_scale', 'bn3b_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3c_branch2a_offset'], VelocityOut=['bn3c_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn3c_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3c_branch2a_offset'], Velocity=['bn3c_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_34/, op_role = 2, op_role_var = ['bn3c_branch2a_offset', 'bn3c_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3c_branch2a_scale'], VelocityOut=['bn3c_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn3c_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3c_branch2a_scale'], Velocity=['bn3c_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_35/, op_role = 2, op_role_var = ['bn3c_branch2a_scale', 'bn3c_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3c_branch2b_offset'], VelocityOut=['bn3c_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn3c_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3c_branch2b_offset'], Velocity=['bn3c_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_36/, op_role = 2, op_role_var = ['bn3c_branch2b_offset', 'bn3c_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3c_branch2b_scale'], VelocityOut=['bn3c_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn3c_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3c_branch2b_scale'], Velocity=['bn3c_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_37/, op_role = 2, op_role_var = ['bn3c_branch2b_scale', 'bn3c_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3c_branch2c_offset'], VelocityOut=['bn3c_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn3c_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3c_branch2c_offset'], Velocity=['bn3c_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_38/, op_role = 2, op_role_var = ['bn3c_branch2c_offset', 'bn3c_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3c_branch2c_scale'], VelocityOut=['bn3c_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn3c_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3c_branch2c_scale'], Velocity=['bn3c_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_39/, op_role = 2, op_role_var = ['bn3c_branch2c_scale', 'bn3c_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3d_branch2a_offset'], VelocityOut=['bn3d_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn3d_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3d_branch2a_offset'], Velocity=['bn3d_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_40/, op_role = 2, op_role_var = ['bn3d_branch2a_offset', 'bn3d_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3d_branch2a_scale'], VelocityOut=['bn3d_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn3d_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3d_branch2a_scale'], Velocity=['bn3d_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_41/, op_role = 2, op_role_var = ['bn3d_branch2a_scale', 'bn3d_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3d_branch2b_offset'], VelocityOut=['bn3d_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn3d_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3d_branch2b_offset'], Velocity=['bn3d_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_42/, op_role = 2, op_role_var = ['bn3d_branch2b_offset', 'bn3d_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3d_branch2b_scale'], VelocityOut=['bn3d_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn3d_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3d_branch2b_scale'], Velocity=['bn3d_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_43/, op_role = 2, op_role_var = ['bn3d_branch2b_scale', 'bn3d_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3d_branch2c_offset'], VelocityOut=['bn3d_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn3d_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3d_branch2c_offset'], Velocity=['bn3d_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_44/, op_role = 2, op_role_var = ['bn3d_branch2c_offset', 'bn3d_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn3d_branch2c_scale'], VelocityOut=['bn3d_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn3d_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn3d_branch2c_scale'], Velocity=['bn3d_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_45/, op_role = 2, op_role_var = ['bn3d_branch2c_scale', 'bn3d_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch1_offset'], VelocityOut=['bn4a_branch1_offset_velocity_0']} = momentum(inputs={Grad=['bn4a_branch1_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch1_offset'], Velocity=['bn4a_branch1_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_46/, op_role = 2, op_role_var = ['bn4a_branch1_offset', 'bn4a_branch1_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch1_scale'], VelocityOut=['bn4a_branch1_scale_velocity_0']} = momentum(inputs={Grad=['bn4a_branch1_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch1_scale'], Velocity=['bn4a_branch1_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_47/, op_role = 2, op_role_var = ['bn4a_branch1_scale', 'bn4a_branch1_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch2a_offset'], VelocityOut=['bn4a_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn4a_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch2a_offset'], Velocity=['bn4a_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_48/, op_role = 2, op_role_var = ['bn4a_branch2a_offset', 'bn4a_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch2a_scale'], VelocityOut=['bn4a_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn4a_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch2a_scale'], Velocity=['bn4a_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_49/, op_role = 2, op_role_var = ['bn4a_branch2a_scale', 'bn4a_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch2b_offset'], VelocityOut=['bn4a_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn4a_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch2b_offset'], Velocity=['bn4a_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_50/, op_role = 2, op_role_var = ['bn4a_branch2b_offset', 'bn4a_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch2b_scale'], VelocityOut=['bn4a_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn4a_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch2b_scale'], Velocity=['bn4a_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_51/, op_role = 2, op_role_var = ['bn4a_branch2b_scale', 'bn4a_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch2c_offset'], VelocityOut=['bn4a_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn4a_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch2c_offset'], Velocity=['bn4a_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_52/, op_role = 2, op_role_var = ['bn4a_branch2c_offset', 'bn4a_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4a_branch2c_scale'], VelocityOut=['bn4a_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn4a_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4a_branch2c_scale'], Velocity=['bn4a_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_53/, op_role = 2, op_role_var = ['bn4a_branch2c_scale', 'bn4a_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4b_branch2a_offset'], VelocityOut=['bn4b_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn4b_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4b_branch2a_offset'], Velocity=['bn4b_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_54/, op_role = 2, op_role_var = ['bn4b_branch2a_offset', 'bn4b_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4b_branch2a_scale'], VelocityOut=['bn4b_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn4b_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4b_branch2a_scale'], Velocity=['bn4b_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_55/, op_role = 2, op_role_var = ['bn4b_branch2a_scale', 'bn4b_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4b_branch2b_offset'], VelocityOut=['bn4b_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn4b_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4b_branch2b_offset'], Velocity=['bn4b_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_56/, op_role = 2, op_role_var = ['bn4b_branch2b_offset', 'bn4b_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4b_branch2b_scale'], VelocityOut=['bn4b_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn4b_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4b_branch2b_scale'], Velocity=['bn4b_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_57/, op_role = 2, op_role_var = ['bn4b_branch2b_scale', 'bn4b_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4b_branch2c_offset'], VelocityOut=['bn4b_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn4b_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4b_branch2c_offset'], Velocity=['bn4b_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_58/, op_role = 2, op_role_var = ['bn4b_branch2c_offset', 'bn4b_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4b_branch2c_scale'], VelocityOut=['bn4b_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn4b_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4b_branch2c_scale'], Velocity=['bn4b_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_59/, op_role = 2, op_role_var = ['bn4b_branch2c_scale', 'bn4b_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4c_branch2a_offset'], VelocityOut=['bn4c_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn4c_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4c_branch2a_offset'], Velocity=['bn4c_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_60/, op_role = 2, op_role_var = ['bn4c_branch2a_offset', 'bn4c_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4c_branch2a_scale'], VelocityOut=['bn4c_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn4c_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4c_branch2a_scale'], Velocity=['bn4c_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_61/, op_role = 2, op_role_var = ['bn4c_branch2a_scale', 'bn4c_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4c_branch2b_offset'], VelocityOut=['bn4c_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn4c_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4c_branch2b_offset'], Velocity=['bn4c_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_62/, op_role = 2, op_role_var = ['bn4c_branch2b_offset', 'bn4c_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4c_branch2b_scale'], VelocityOut=['bn4c_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn4c_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4c_branch2b_scale'], Velocity=['bn4c_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_63/, op_role = 2, op_role_var = ['bn4c_branch2b_scale', 'bn4c_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4c_branch2c_offset'], VelocityOut=['bn4c_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn4c_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4c_branch2c_offset'], Velocity=['bn4c_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_64/, op_role = 2, op_role_var = ['bn4c_branch2c_offset', 'bn4c_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4c_branch2c_scale'], VelocityOut=['bn4c_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn4c_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4c_branch2c_scale'], Velocity=['bn4c_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_65/, op_role = 2, op_role_var = ['bn4c_branch2c_scale', 'bn4c_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4d_branch2a_offset'], VelocityOut=['bn4d_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn4d_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4d_branch2a_offset'], Velocity=['bn4d_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_66/, op_role = 2, op_role_var = ['bn4d_branch2a_offset', 'bn4d_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4d_branch2a_scale'], VelocityOut=['bn4d_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn4d_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4d_branch2a_scale'], Velocity=['bn4d_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_67/, op_role = 2, op_role_var = ['bn4d_branch2a_scale', 'bn4d_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4d_branch2b_offset'], VelocityOut=['bn4d_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn4d_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4d_branch2b_offset'], Velocity=['bn4d_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_68/, op_role = 2, op_role_var = ['bn4d_branch2b_offset', 'bn4d_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4d_branch2b_scale'], VelocityOut=['bn4d_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn4d_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4d_branch2b_scale'], Velocity=['bn4d_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_69/, op_role = 2, op_role_var = ['bn4d_branch2b_scale', 'bn4d_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4d_branch2c_offset'], VelocityOut=['bn4d_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn4d_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4d_branch2c_offset'], Velocity=['bn4d_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_70/, op_role = 2, op_role_var = ['bn4d_branch2c_offset', 'bn4d_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4d_branch2c_scale'], VelocityOut=['bn4d_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn4d_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4d_branch2c_scale'], Velocity=['bn4d_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_71/, op_role = 2, op_role_var = ['bn4d_branch2c_scale', 'bn4d_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4e_branch2a_offset'], VelocityOut=['bn4e_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn4e_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4e_branch2a_offset'], Velocity=['bn4e_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_72/, op_role = 2, op_role_var = ['bn4e_branch2a_offset', 'bn4e_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4e_branch2a_scale'], VelocityOut=['bn4e_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn4e_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4e_branch2a_scale'], Velocity=['bn4e_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_73/, op_role = 2, op_role_var = ['bn4e_branch2a_scale', 'bn4e_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4e_branch2b_offset'], VelocityOut=['bn4e_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn4e_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4e_branch2b_offset'], Velocity=['bn4e_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_74/, op_role = 2, op_role_var = ['bn4e_branch2b_offset', 'bn4e_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4e_branch2b_scale'], VelocityOut=['bn4e_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn4e_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4e_branch2b_scale'], Velocity=['bn4e_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_75/, op_role = 2, op_role_var = ['bn4e_branch2b_scale', 'bn4e_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4e_branch2c_offset'], VelocityOut=['bn4e_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn4e_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4e_branch2c_offset'], Velocity=['bn4e_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_76/, op_role = 2, op_role_var = ['bn4e_branch2c_offset', 'bn4e_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4e_branch2c_scale'], VelocityOut=['bn4e_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn4e_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4e_branch2c_scale'], Velocity=['bn4e_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_77/, op_role = 2, op_role_var = ['bn4e_branch2c_scale', 'bn4e_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4f_branch2a_offset'], VelocityOut=['bn4f_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn4f_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4f_branch2a_offset'], Velocity=['bn4f_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_78/, op_role = 2, op_role_var = ['bn4f_branch2a_offset', 'bn4f_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4f_branch2a_scale'], VelocityOut=['bn4f_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn4f_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4f_branch2a_scale'], Velocity=['bn4f_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_79/, op_role = 2, op_role_var = ['bn4f_branch2a_scale', 'bn4f_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4f_branch2b_offset'], VelocityOut=['bn4f_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn4f_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4f_branch2b_offset'], Velocity=['bn4f_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_80/, op_role = 2, op_role_var = ['bn4f_branch2b_offset', 'bn4f_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4f_branch2b_scale'], VelocityOut=['bn4f_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn4f_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4f_branch2b_scale'], Velocity=['bn4f_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_81/, op_role = 2, op_role_var = ['bn4f_branch2b_scale', 'bn4f_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4f_branch2c_offset'], VelocityOut=['bn4f_branch2c_offset_velocity_0']} = momentum(inputs={Grad=['bn4f_branch2c_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4f_branch2c_offset'], Velocity=['bn4f_branch2c_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_82/, op_role = 2, op_role_var = ['bn4f_branch2c_offset', 'bn4f_branch2c_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn4f_branch2c_scale'], VelocityOut=['bn4f_branch2c_scale_velocity_0']} = momentum(inputs={Grad=['bn4f_branch2c_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn4f_branch2c_scale'], Velocity=['bn4f_branch2c_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_83/, op_role = 2, op_role_var = ['bn4f_branch2c_scale', 'bn4f_branch2c_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn5a_branch2a_offset'], VelocityOut=['bn5a_branch2a_offset_velocity_0']} = momentum(inputs={Grad=['bn5a_branch2a_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn5a_branch2a_offset'], Velocity=['bn5a_branch2a_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_86/, op_role = 2, op_role_var = ['bn5a_branch2a_offset', 'bn5a_branch2a_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn5a_branch2a_scale'], VelocityOut=['bn5a_branch2a_scale_velocity_0']} = momentum(inputs={Grad=['bn5a_branch2a_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn5a_branch2a_scale'], Velocity=['bn5a_branch2a_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_87/, op_role = 2, op_role_var = ['bn5a_branch2a_scale', 'bn5a_branch2a_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn5a_branch2b_offset'], VelocityOut=['bn5a_branch2b_offset_velocity_0']} = momentum(inputs={Grad=['bn5a_branch2b_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn5a_branch2b_offset'], Velocity=['bn5a_branch2b_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_88/, op_role = 2, op_role_var = ['bn5a_branch2b_offset', 'bn5a_branch2b_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn5a_branch2b_scale'], VelocityOut=['bn5a_branch2b_scale_velocity_0']} = momentum(inputs={Grad=['bn5a_branch2b_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn5a_branch2b_scale'], Velocity=['bn5a_branch2b_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_89/, op_role = 2, op_role_var = ['bn5a_branch2b_scale', 'bn5a_branch2b_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn_conv1_offset'], VelocityOut=['bn_conv1_offset_velocity_0']} = momentum(inputs={Grad=['bn_conv1_offset@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn_conv1_offset'], Velocity=['bn_conv1_offset_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_104/, op_role = 2, op_role_var = ['bn_conv1_offset', 'bn_conv1_offset@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['bn_conv1_scale'], VelocityOut=['bn_conv1_scale_velocity_0']} = momentum(inputs={Grad=['bn_conv1_scale@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['bn_conv1_scale'], Velocity=['bn_conv1_scale_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_105/, op_role = 2, op_role_var = ['bn_conv1_scale', 'bn_conv1_scale@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['conv1_weights'], VelocityOut=['conv1_weights_velocity_0']} = momentum(inputs={Grad=['conv1_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['conv1_weights'], Velocity=['conv1_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_106/, op_role = 2, op_role_var = ['conv1_weights', 'conv1_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2a_branch1_weights'], VelocityOut=['res2a_branch1_weights_velocity_0']} = momentum(inputs={Grad=['res2a_branch1_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2a_branch1_weights'], Velocity=['res2a_branch1_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_109/, op_role = 2, op_role_var = ['res2a_branch1_weights', 'res2a_branch1_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2a_branch2a_weights'], VelocityOut=['res2a_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res2a_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2a_branch2a_weights'], Velocity=['res2a_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_110/, op_role = 2, op_role_var = ['res2a_branch2a_weights', 'res2a_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2a_branch2b_weights'], VelocityOut=['res2a_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res2a_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2a_branch2b_weights'], Velocity=['res2a_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_111/, op_role = 2, op_role_var = ['res2a_branch2b_weights', 'res2a_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2a_branch2c_weights'], VelocityOut=['res2a_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res2a_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2a_branch2c_weights'], Velocity=['res2a_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_112/, op_role = 2, op_role_var = ['res2a_branch2c_weights', 'res2a_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2b_branch2a_weights'], VelocityOut=['res2b_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res2b_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2b_branch2a_weights'], Velocity=['res2b_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_113/, op_role = 2, op_role_var = ['res2b_branch2a_weights', 'res2b_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2b_branch2b_weights'], VelocityOut=['res2b_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res2b_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2b_branch2b_weights'], Velocity=['res2b_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_114/, op_role = 2, op_role_var = ['res2b_branch2b_weights', 'res2b_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2b_branch2c_weights'], VelocityOut=['res2b_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res2b_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2b_branch2c_weights'], Velocity=['res2b_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_115/, op_role = 2, op_role_var = ['res2b_branch2c_weights', 'res2b_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2c_branch2a_weights'], VelocityOut=['res2c_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res2c_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2c_branch2a_weights'], Velocity=['res2c_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_116/, op_role = 2, op_role_var = ['res2c_branch2a_weights', 'res2c_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2c_branch2b_weights'], VelocityOut=['res2c_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res2c_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2c_branch2b_weights'], Velocity=['res2c_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_117/, op_role = 2, op_role_var = ['res2c_branch2b_weights', 'res2c_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res2c_branch2c_weights'], VelocityOut=['res2c_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res2c_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res2c_branch2c_weights'], Velocity=['res2c_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_118/, op_role = 2, op_role_var = ['res2c_branch2c_weights', 'res2c_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3a_branch1_weights'], VelocityOut=['res3a_branch1_weights_velocity_0']} = momentum(inputs={Grad=['res3a_branch1_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3a_branch1_weights'], Velocity=['res3a_branch1_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_119/, op_role = 2, op_role_var = ['res3a_branch1_weights', 'res3a_branch1_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3a_branch2a_weights'], VelocityOut=['res3a_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res3a_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3a_branch2a_weights'], Velocity=['res3a_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_120/, op_role = 2, op_role_var = ['res3a_branch2a_weights', 'res3a_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3a_branch2b_weights'], VelocityOut=['res3a_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res3a_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3a_branch2b_weights'], Velocity=['res3a_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_121/, op_role = 2, op_role_var = ['res3a_branch2b_weights', 'res3a_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3a_branch2c_weights'], VelocityOut=['res3a_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res3a_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3a_branch2c_weights'], Velocity=['res3a_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_122/, op_role = 2, op_role_var = ['res3a_branch2c_weights', 'res3a_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3b_branch2a_weights'], VelocityOut=['res3b_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res3b_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3b_branch2a_weights'], Velocity=['res3b_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_123/, op_role = 2, op_role_var = ['res3b_branch2a_weights', 'res3b_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3b_branch2b_weights'], VelocityOut=['res3b_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res3b_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3b_branch2b_weights'], Velocity=['res3b_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_124/, op_role = 2, op_role_var = ['res3b_branch2b_weights', 'res3b_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3b_branch2c_weights'], VelocityOut=['res3b_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res3b_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3b_branch2c_weights'], Velocity=['res3b_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_125/, op_role = 2, op_role_var = ['res3b_branch2c_weights', 'res3b_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3c_branch2a_weights'], VelocityOut=['res3c_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res3c_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3c_branch2a_weights'], Velocity=['res3c_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_126/, op_role = 2, op_role_var = ['res3c_branch2a_weights', 'res3c_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3c_branch2b_weights'], VelocityOut=['res3c_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res3c_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3c_branch2b_weights'], Velocity=['res3c_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_127/, op_role = 2, op_role_var = ['res3c_branch2b_weights', 'res3c_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3c_branch2c_weights'], VelocityOut=['res3c_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res3c_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3c_branch2c_weights'], Velocity=['res3c_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_128/, op_role = 2, op_role_var = ['res3c_branch2c_weights', 'res3c_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3d_branch2a_weights'], VelocityOut=['res3d_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res3d_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3d_branch2a_weights'], Velocity=['res3d_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_129/, op_role = 2, op_role_var = ['res3d_branch2a_weights', 'res3d_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3d_branch2b_weights'], VelocityOut=['res3d_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res3d_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3d_branch2b_weights'], Velocity=['res3d_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_130/, op_role = 2, op_role_var = ['res3d_branch2b_weights', 'res3d_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res3d_branch2c_weights'], VelocityOut=['res3d_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res3d_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res3d_branch2c_weights'], Velocity=['res3d_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_131/, op_role = 2, op_role_var = ['res3d_branch2c_weights', 'res3d_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4a_branch1_weights'], VelocityOut=['res4a_branch1_weights_velocity_0']} = momentum(inputs={Grad=['res4a_branch1_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4a_branch1_weights'], Velocity=['res4a_branch1_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_132/, op_role = 2, op_role_var = ['res4a_branch1_weights', 'res4a_branch1_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4a_branch2a_weights'], VelocityOut=['res4a_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res4a_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4a_branch2a_weights'], Velocity=['res4a_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_133/, op_role = 2, op_role_var = ['res4a_branch2a_weights', 'res4a_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4a_branch2b_weights'], VelocityOut=['res4a_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res4a_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4a_branch2b_weights'], Velocity=['res4a_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_134/, op_role = 2, op_role_var = ['res4a_branch2b_weights', 'res4a_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4a_branch2c_weights'], VelocityOut=['res4a_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res4a_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4a_branch2c_weights'], Velocity=['res4a_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_135/, op_role = 2, op_role_var = ['res4a_branch2c_weights', 'res4a_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4b_branch2a_weights'], VelocityOut=['res4b_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res4b_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4b_branch2a_weights'], Velocity=['res4b_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_136/, op_role = 2, op_role_var = ['res4b_branch2a_weights', 'res4b_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4b_branch2b_weights'], VelocityOut=['res4b_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res4b_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4b_branch2b_weights'], Velocity=['res4b_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_137/, op_role = 2, op_role_var = ['res4b_branch2b_weights', 'res4b_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4b_branch2c_weights'], VelocityOut=['res4b_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res4b_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4b_branch2c_weights'], Velocity=['res4b_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_138/, op_role = 2, op_role_var = ['res4b_branch2c_weights', 'res4b_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4c_branch2a_weights'], VelocityOut=['res4c_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res4c_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4c_branch2a_weights'], Velocity=['res4c_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_139/, op_role = 2, op_role_var = ['res4c_branch2a_weights', 'res4c_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4c_branch2b_weights'], VelocityOut=['res4c_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res4c_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4c_branch2b_weights'], Velocity=['res4c_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_140/, op_role = 2, op_role_var = ['res4c_branch2b_weights', 'res4c_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4c_branch2c_weights'], VelocityOut=['res4c_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res4c_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4c_branch2c_weights'], Velocity=['res4c_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_141/, op_role = 2, op_role_var = ['res4c_branch2c_weights', 'res4c_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4d_branch2a_weights'], VelocityOut=['res4d_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res4d_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4d_branch2a_weights'], Velocity=['res4d_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_142/, op_role = 2, op_role_var = ['res4d_branch2a_weights', 'res4d_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4d_branch2b_weights'], VelocityOut=['res4d_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res4d_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4d_branch2b_weights'], Velocity=['res4d_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_143/, op_role = 2, op_role_var = ['res4d_branch2b_weights', 'res4d_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4d_branch2c_weights'], VelocityOut=['res4d_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res4d_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4d_branch2c_weights'], Velocity=['res4d_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_144/, op_role = 2, op_role_var = ['res4d_branch2c_weights', 'res4d_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4e_branch2a_weights'], VelocityOut=['res4e_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res4e_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4e_branch2a_weights'], Velocity=['res4e_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_145/, op_role = 2, op_role_var = ['res4e_branch2a_weights', 'res4e_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4e_branch2b_weights'], VelocityOut=['res4e_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res4e_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4e_branch2b_weights'], Velocity=['res4e_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_146/, op_role = 2, op_role_var = ['res4e_branch2b_weights', 'res4e_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4e_branch2c_weights'], VelocityOut=['res4e_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res4e_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4e_branch2c_weights'], Velocity=['res4e_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_147/, op_role = 2, op_role_var = ['res4e_branch2c_weights', 'res4e_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4f_branch2a_weights'], VelocityOut=['res4f_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res4f_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4f_branch2a_weights'], Velocity=['res4f_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_148/, op_role = 2, op_role_var = ['res4f_branch2a_weights', 'res4f_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4f_branch2b_weights'], VelocityOut=['res4f_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res4f_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4f_branch2b_weights'], Velocity=['res4f_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_149/, op_role = 2, op_role_var = ['res4f_branch2b_weights', 'res4f_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res4f_branch2c_weights'], VelocityOut=['res4f_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res4f_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res4f_branch2c_weights'], Velocity=['res4f_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_150/, op_role = 2, op_role_var = ['res4f_branch2c_weights', 'res4f_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res5a_branch2a_weights'], VelocityOut=['res5a_branch2a_weights_velocity_0']} = momentum(inputs={Grad=['res5a_branch2a_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res5a_branch2a_weights'], Velocity=['res5a_branch2a_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_152/, op_role = 2, op_role_var = ['res5a_branch2a_weights', 'res5a_branch2a_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res5a_branch2b_weights'], VelocityOut=['res5a_branch2b_weights_velocity_0']} = momentum(inputs={Grad=['res5a_branch2b_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res5a_branch2b_weights'], Velocity=['res5a_branch2b_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_153/, op_role = 2, op_role_var = ['res5a_branch2b_weights', 'res5a_branch2b_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
    {ParamOut=['res5a_branch2c_weights'], VelocityOut=['res5a_branch2c_weights_velocity_0']} = momentum(inputs={Grad=['res5a_branch2c_weights@GRAD'], LearningRate=['learning_rate_0'], MasterParam=[], Param=['res5a_branch2c_weights'], Velocity=['res5a_branch2c_weights_velocity_0']}, mu = 0.8999999761581421, multi_precision = False, op_device = , op_namescope = /optimizer_154/, op_role = 2, op_role_var = ['res5a_branch2c_weights', 'res5a_branch2c_weights@GRAD'], regularization_coeff = 9.999999747378752e-05, regularization_method = l2_decay, rescale_grad = 1.0, use_nesterov = False, with_quant_attr = False)
}
